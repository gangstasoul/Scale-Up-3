/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/




(function ($, Drupal) {
  Drupal.theme.progressBar = function (id) {
    return "<div id=\"".concat(id, "\" class=\"progress\" aria-live=\"polite\">") + '<div class="progress__label">&nbsp;</div>' + '<div class="progress__track"><div class="progress__bar"></div></div>' + '<div class="progress__percentage"></div>' + '<div class="progress__description">&nbsp;</div>' + '</div>';
  };
  Drupal.ProgressBar = function (id, updateCallback, method, errorCallback) {
    this.id = id;
    this.method = method || 'GET';
    this.updateCallback = updateCallback;
    this.errorCallback = errorCallback;
    this.element = $(Drupal.theme('progressBar', id));
  };
  $.extend(Drupal.ProgressBar.prototype, {
    setProgress: function setProgress(percentage, message, label) {
      if (percentage >= 0 && percentage <= 100) {
        $(this.element).find('div.progress__bar').css('width', "".concat(percentage, "%"));
        $(this.element).find('div.progress__percentage').html("".concat(percentage, "%"));
      }
      $('div.progress__description', this.element).html(message);
      $('div.progress__label', this.element).html(label);
      if (this.updateCallback) {
        this.updateCallback(percentage, message, this);
      }
    },
    startMonitoring: function startMonitoring(uri, delay) {
      this.delay = delay;
      this.uri = uri;
      this.sendPing();
    },
    stopMonitoring: function stopMonitoring() {
      clearTimeout(this.timer);
      this.uri = null;
    },
    sendPing: function sendPing() {
      if (this.timer) {
        clearTimeout(this.timer);
      }
      if (this.uri) {
        var pb = this;
        var uri = this.uri;
        if (uri.indexOf('?') === -1) {
          uri += '?';
        } else {
          uri += '&';
        }
        uri += '_format=json';
        $.ajax({
          type: this.method,
          url: uri,
          data: '',
          dataType: 'json',
          success: function success(progress) {
            if (progress.status === 0) {
              pb.displayError(progress.data);
              return;
            }
            pb.setProgress(progress.percentage, progress.message, progress.label);
            pb.timer = setTimeout(function () {
              pb.sendPing();
            }, pb.delay);
          },
          error: function error(xmlhttp) {
            var e = new Drupal.AjaxError(xmlhttp, pb.uri);
            pb.displayError("<pre>".concat(e.message, "</pre>"));
          }
        });
      }
    },
    displayError: function displayError(string) {
      var error = $('<div class="messages messages--error"></div>').html(string);
      $(this.element).before(error).hide();
      if (this.errorCallback) {
        this.errorCallback(this);
      }
    }
  });
})(jQuery, Drupal);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, once) {
  var deprecatedMessageSuffix = "is deprecated in Drupal 9.3.0 and will be removed in Drupal 10.0.0. Use the core/once library instead. See https://www.drupal.org/node/3158256";
  var originalJQOnce = $.fn.once;
  var originalJQRemoveOnce = $.fn.removeOnce;
  $.fn.once = function jQueryOnce(id) {
    Drupal.deprecationError({
      message: "jQuery.once() ".concat(deprecatedMessageSuffix)
    });
    return originalJQOnce.apply(this, [id]);
  };
  $.fn.removeOnce = function jQueryRemoveOnce(id) {
    Drupal.deprecationError({
      message: "jQuery.removeOnce() ".concat(deprecatedMessageSuffix)
    });
    return originalJQRemoveOnce.apply(this, [id]);
  };
  var drupalOnce = once;
  function augmentedOnce(id, selector, context) {
    originalJQOnce.apply($(selector, context), [id]);
    return drupalOnce(id, selector, context);
  }
  function remove(id, selector, context) {
    originalJQRemoveOnce.apply($(selector, context), [id]);
    return drupalOnce.remove(id, selector, context);
  }
  window.once = Object.assign(augmentedOnce, drupalOnce, {
    remove: remove
  });
})(jQuery, once);;
loadjs=function(){var h=function(){},c={},u={},f={};function o(e,n){if(e){var r=f[e];if(u[e]=n,r)for(;r.length;)r[0](e,n),r.splice(0,1)}}function l(e,n){e.call&&(e={success:e}),n.length?(e.error||h)(n):(e.success||h)(e)}function d(r,t,s,i){var c,o,e=document,n=s.async,u=(s.numRetries||0)+1,f=s.before||h,l=r.replace(/[\?|#].*$/,""),a=r.replace(/^(css|img)!/,"");i=i||0,/(^css!|\.css$)/.test(l)?((o=e.createElement("link")).rel="stylesheet",o.href=a,(c="hideFocus"in o)&&o.relList&&(c=0,o.rel="preload",o.as="style")):/(^img!|\.(png|gif|jpg|svg|webp)$)/.test(l)?(o=e.createElement("img")).src=a:((o=e.createElement("script")).src=r,o.async=void 0===n||n),!(o.onload=o.onerror=o.onbeforeload=function(e){var n=e.type[0];if(c)try{o.sheet.cssText.length||(n="e")}catch(e){18!=e.code&&(n="e")}if("e"==n){if((i+=1)<u)return d(r,t,s,i)}else if("preload"==o.rel&&"style"==o.as)return o.rel="stylesheet";t(r,n,e.defaultPrevented)})!==f(r,o)&&e.head.appendChild(o)}function r(e,n,r){var t,s;if(n&&n.trim&&(t=n),s=(t?r:n)||{},t){if(t in c)throw"LoadJS";c[t]=!0}function i(n,r){!function(e,t,n){var r,s,i=(e=e.push?e:[e]).length,c=i,o=[];for(r=function(e,n,r){if("e"==n&&o.push(e),"b"==n){if(!r)return;o.push(e)}--i||t(o)},s=0;s<c;s++)d(e[s],r,n)}(e,function(e){l(s,e),n&&l({success:n,error:r},e),o(t,e)},s)}if(s.returnPromise)return new Promise(i);i()}return r.ready=function(e,n){return function(e,r){e=e.push?e:[e];var n,t,s,i=[],c=e.length,o=c;for(n=function(e,n){n.length&&i.push(e),--o||r(i)};c--;)t=e[c],(s=u[t])?n(t,s):(f[t]=f[t]||[]).push(n)}(e,function(e){l(n,e)}),r},r.done=function(e){o(e,[])},r.reset=function(){c={},u={},f={}},r.isDefined=function(e){return e in c},r}();;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function (Drupal) {
  Drupal.behaviors.responsiveImageAJAX = {
    attach: function attach() {
      if (window.picturefill) {
        window.picturefill();
      }
    }
  };
})(Drupal);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
(function ($, window, Drupal, drupalSettings, loadjs, _ref) {
  var isFocusable = _ref.isFocusable,
    tabbable = _ref.tabbable;
  Drupal.behaviors.AJAX = {
    attach: function attach(context, settings) {
      function loadAjaxBehavior(base) {
        var elementSettings = settings.ajax[base];
        if (typeof elementSettings.selector === 'undefined') {
          elementSettings.selector = "#".concat(base);
        }
        once('drupal-ajax', $(elementSettings.selector)).forEach(function (el) {
          elementSettings.element = el;
          elementSettings.base = base;
          Drupal.ajax(elementSettings);
        });
      }
      Object.keys(settings.ajax || {}).forEach(function (base) {
        return loadAjaxBehavior(base);
      });
      Drupal.ajax.bindAjaxLinks(document.body);
      once('ajax', '.use-ajax-submit').forEach(function (el) {
        var elementSettings = {};
        elementSettings.url = $(el.form).attr('action');
        elementSettings.setClick = true;
        elementSettings.event = 'click';
        elementSettings.progress = {
          type: 'throbber'
        };
        elementSettings.base = el.id;
        elementSettings.element = el;
        Drupal.ajax(elementSettings);
      });
    },
    detach: function detach(context, settings, trigger) {
      if (trigger === 'unload') {
        Drupal.ajax.expired().forEach(function (instance) {
          Drupal.ajax.instances[instance.instanceIndex] = null;
        });
      }
    }
  };
  Drupal.AjaxError = function (xmlhttp, uri, customMessage) {
    var statusCode;
    var statusText;
    var responseText;
    if (xmlhttp.status) {
      statusCode = "\n".concat(Drupal.t('An AJAX HTTP error occurred.'), "\n").concat(Drupal.t('HTTP Result Code: !status', {
        '!status': xmlhttp.status
      }));
    } else {
      statusCode = "\n".concat(Drupal.t('An AJAX HTTP request terminated abnormally.'));
    }
    statusCode += "\n".concat(Drupal.t('Debugging information follows.'));
    var pathText = "\n".concat(Drupal.t('Path: !uri', {
      '!uri': uri
    }));
    statusText = '';
    try {
      statusText = "\n".concat(Drupal.t('StatusText: !statusText', {
        '!statusText': xmlhttp.statusText.trim()
      }));
    } catch (e) {}
    responseText = '';
    try {
      responseText = "\n".concat(Drupal.t('ResponseText: !responseText', {
        '!responseText': xmlhttp.responseText.trim()
      }));
    } catch (e) {}
    responseText = responseText.replace(/<("[^"]*"|'[^']*'|[^'">])*>/gi, '');
    responseText = responseText.replace(/[\n]+\s+/g, '\n');
    var readyStateText = xmlhttp.status === 0 ? "\n".concat(Drupal.t('ReadyState: !readyState', {
      '!readyState': xmlhttp.readyState
    })) : '';
    customMessage = customMessage ? "\n".concat(Drupal.t('CustomMessage: !customMessage', {
      '!customMessage': customMessage
    })) : '';
    this.message = statusCode + pathText + statusText + customMessage + responseText + readyStateText;
    this.name = 'AjaxError';
  };
  Drupal.AjaxError.prototype = new Error();
  Drupal.AjaxError.prototype.constructor = Drupal.AjaxError;
  Drupal.ajax = function (settings) {
    if (arguments.length !== 1) {
      throw new Error('Drupal.ajax() function must be called with one configuration object only');
    }
    var base = settings.base || false;
    var element = settings.element || false;
    delete settings.base;
    delete settings.element;
    if (!settings.progress && !element) {
      settings.progress = false;
    }
    var ajax = new Drupal.Ajax(base, element, settings);
    ajax.instanceIndex = Drupal.ajax.instances.length;
    Drupal.ajax.instances.push(ajax);
    return ajax;
  };
  Drupal.ajax.instances = [];
  Drupal.ajax.expired = function () {
    return Drupal.ajax.instances.filter(function (instance) {
      return instance && instance.element !== false && !document.body.contains(instance.element);
    });
  };
  Drupal.ajax.bindAjaxLinks = function (element) {
    once('ajax', '.use-ajax', element).forEach(function (ajaxLink) {
      var $linkElement = $(ajaxLink);
      var elementSettings = {
        progress: {
          type: 'throbber'
        },
        dialogType: $linkElement.data('dialog-type'),
        dialog: $linkElement.data('dialog-options'),
        dialogRenderer: $linkElement.data('dialog-renderer'),
        base: $linkElement.attr('id'),
        element: ajaxLink
      };
      var href = $linkElement.attr('href');
      if (href) {
        elementSettings.url = href;
        elementSettings.event = 'click';
      }
      Drupal.ajax(elementSettings);
    });
  };
  Drupal.Ajax = function (base, element, elementSettings) {
    var defaults = {
      event: element ? 'mousedown' : null,
      keypress: true,
      selector: base ? "#".concat(base) : null,
      effect: 'none',
      speed: 'none',
      method: 'replaceWith',
      progress: {
        type: 'throbber',
        message: Drupal.t('Please wait...')
      },
      submit: {
        js: true
      }
    };
    $.extend(this, defaults, elementSettings);
    this.commands = new Drupal.AjaxCommands();
    this.instanceIndex = false;
    if (this.wrapper) {
      this.wrapper = "#".concat(this.wrapper);
    }
    this.element = element;
    this.element_settings = elementSettings;
    this.elementSettings = elementSettings;
    if (this.element && this.element.form) {
      this.$form = $(this.element.form);
    }
    if (!this.url) {
      var $element = $(this.element);
      if ($element.is('a')) {
        this.url = $element.attr('href');
      } else if (this.element && element.form) {
        this.url = this.$form.attr('action');
      }
    }
    var originalUrl = this.url;
    this.url = this.url.replace(/\/nojs(\/|$|\?|#)/, '/ajax$1');
    if (drupalSettings.ajaxTrustedUrl[originalUrl]) {
      drupalSettings.ajaxTrustedUrl[this.url] = true;
    }
    var ajax = this;
    ajax.options = {
      url: ajax.url,
      data: ajax.submit,
      isInProgress: function isInProgress() {
        return ajax.ajaxing;
      },
      beforeSerialize: function beforeSerialize(elementSettings, options) {
        return ajax.beforeSerialize(elementSettings, options);
      },
      beforeSubmit: function beforeSubmit(formValues, elementSettings, options) {
        ajax.ajaxing = true;
        return ajax.beforeSubmit(formValues, elementSettings, options);
      },
      beforeSend: function beforeSend(xmlhttprequest, options) {
        ajax.ajaxing = true;
        return ajax.beforeSend(xmlhttprequest, options);
      },
      success: function success(response, status, xmlhttprequest) {
        var _this = this;
        if (typeof response === 'string') {
          response = $.parseJSON(response);
        }
        if (response !== null && !drupalSettings.ajaxTrustedUrl[ajax.url]) {
          if (xmlhttprequest.getResponseHeader('X-Drupal-Ajax-Token') !== '1') {
            var customMessage = Drupal.t('The response failed verification so will not be processed.');
            return ajax.error(xmlhttprequest, ajax.url, customMessage);
          }
        }
        return Promise.resolve(ajax.success(response, status)).then(function () {
          ajax.ajaxing = false;
          $(document).trigger('ajaxSuccess', [xmlhttprequest, _this]);
          $(document).trigger('ajaxComplete', [xmlhttprequest, _this]);
          if (--$.active === 0) {
            $(document).trigger('ajaxStop');
          }
        });
      },
      error: function error(xmlhttprequest, status, _error) {
        ajax.ajaxing = false;
      },
      complete: function complete(xmlhttprequest, status) {
        if (status === 'error' || status === 'parsererror') {
          return ajax.error(xmlhttprequest, ajax.url);
        }
      },
      dataType: 'json',
      jsonp: false,
      type: 'POST'
    };
    if (elementSettings.dialog) {
      ajax.options.data.dialogOptions = elementSettings.dialog;
    }
    if (ajax.options.url.indexOf('?') === -1) {
      ajax.options.url += '?';
    } else {
      ajax.options.url += '&';
    }
    var wrapper = "drupal_".concat(elementSettings.dialogType || 'ajax');
    if (elementSettings.dialogRenderer) {
      wrapper += ".".concat(elementSettings.dialogRenderer);
    }
    ajax.options.url += "".concat(Drupal.ajax.WRAPPER_FORMAT, "=").concat(wrapper);
    $(ajax.element).on(elementSettings.event, function (event) {
      if (!drupalSettings.ajaxTrustedUrl[ajax.url] && !Drupal.url.isLocal(ajax.url)) {
        throw new Error(Drupal.t('The callback URL is not local and not trusted: !url', {
          '!url': ajax.url
        }));
      }
      return ajax.eventResponse(this, event);
    });
    if (elementSettings.keypress) {
      $(ajax.element).on('keypress', function (event) {
        return ajax.keypressResponse(this, event);
      });
    }
    if (elementSettings.prevent) {
      $(ajax.element).on(elementSettings.prevent, false);
    }
  };
  Drupal.ajax.WRAPPER_FORMAT = '_wrapper_format';
  Drupal.Ajax.AJAX_REQUEST_PARAMETER = '_drupal_ajax';
  Drupal.Ajax.prototype.execute = function () {
    if (this.ajaxing) {
      return;
    }
    try {
      this.beforeSerialize(this.element, this.options);
      return $.ajax(this.options);
    } catch (e) {
      this.ajaxing = false;
      window.alert("An error occurred while attempting to process ".concat(this.options.url, ": ").concat(e.message));
      return $.Deferred().reject();
    }
  };
  Drupal.Ajax.prototype.keypressResponse = function (element, event) {
    var ajax = this;
    if (event.which === 13 || event.which === 32 && element.type !== 'text' && element.type !== 'textarea' && element.type !== 'tel' && element.type !== 'number') {
      event.preventDefault();
      event.stopPropagation();
      $(element).trigger(ajax.elementSettings.event);
    }
  };
  Drupal.Ajax.prototype.eventResponse = function (element, event) {
    event.preventDefault();
    event.stopPropagation();
    var ajax = this;
    if (ajax.ajaxing) {
      return;
    }
    try {
      if (ajax.$form) {
        if (ajax.setClick) {
          element.form.clk = element;
        }
        ajax.$form.ajaxSubmit(ajax.options);
      } else {
        ajax.beforeSerialize(ajax.element, ajax.options);
        $.ajax(ajax.options);
      }
    } catch (e) {
      ajax.ajaxing = false;
      window.alert("An error occurred while attempting to process ".concat(ajax.options.url, ": ").concat(e.message));
    }
  };
  Drupal.Ajax.prototype.beforeSerialize = function (element, options) {
    if (this.$form && document.body.contains(this.$form.get(0))) {
      var settings = this.settings || drupalSettings;
      Drupal.detachBehaviors(this.$form.get(0), settings, 'serialize');
    }
    options.data[Drupal.Ajax.AJAX_REQUEST_PARAMETER] = 1;
    var pageState = drupalSettings.ajaxPageState;
    options.data['ajax_page_state[theme]'] = pageState.theme;
    options.data['ajax_page_state[theme_token]'] = pageState.theme_token;
    options.data['ajax_page_state[libraries]'] = pageState.libraries;
  };
  Drupal.Ajax.prototype.beforeSubmit = function (formValues, element, options) {};
  Drupal.Ajax.prototype.beforeSend = function (xmlhttprequest, options) {
    if (this.$form) {
      options.extraData = options.extraData || {};
      options.extraData.ajax_iframe_upload = '1';
      var v = $.fieldValue(this.element);
      if (v !== null) {
        options.extraData[this.element.name] = v;
      }
    }
    $(this.element).prop('disabled', true);
    if (!this.progress || !this.progress.type) {
      return;
    }
    var progressIndicatorMethod = "setProgressIndicator".concat(this.progress.type.slice(0, 1).toUpperCase()).concat(this.progress.type.slice(1).toLowerCase());
    if (progressIndicatorMethod in this && typeof this[progressIndicatorMethod] === 'function') {
      this[progressIndicatorMethod].call(this);
    }
  };
  Drupal.theme.ajaxProgressThrobber = function (message) {
    var messageMarkup = typeof message === 'string' ? Drupal.theme('ajaxProgressMessage', message) : '';
    var throbber = '<div class="throbber">&nbsp;</div>';
    return "<div class=\"ajax-progress ajax-progress-throbber\">".concat(throbber).concat(messageMarkup, "</div>");
  };
  Drupal.theme.ajaxProgressIndicatorFullscreen = function () {
    return '<div class="ajax-progress ajax-progress-fullscreen">&nbsp;</div>';
  };
  Drupal.theme.ajaxProgressMessage = function (message) {
    return "<div class=\"message\">".concat(message, "</div>");
  };
  Drupal.theme.ajaxProgressBar = function ($element) {
    return $('<div class="ajax-progress ajax-progress-bar"></div>').append($element);
  };
  Drupal.Ajax.prototype.setProgressIndicatorBar = function () {
    var progressBar = new Drupal.ProgressBar("ajax-progress-".concat(this.element.id), $.noop, this.progress.method, $.noop);
    if (this.progress.message) {
      progressBar.setProgress(-1, this.progress.message);
    }
    if (this.progress.url) {
      progressBar.startMonitoring(this.progress.url, this.progress.interval || 1500);
    }
    this.progress.element = $(Drupal.theme('ajaxProgressBar', progressBar.element));
    this.progress.object = progressBar;
    $(this.element).after(this.progress.element);
  };
  Drupal.Ajax.prototype.setProgressIndicatorThrobber = function () {
    this.progress.element = $(Drupal.theme('ajaxProgressThrobber', this.progress.message));
    $(this.element).after(this.progress.element);
  };
  Drupal.Ajax.prototype.setProgressIndicatorFullscreen = function () {
    this.progress.element = $(Drupal.theme('ajaxProgressIndicatorFullscreen'));
    $('body').append(this.progress.element);
  };
  Drupal.Ajax.prototype.commandExecutionQueue = function (response, status) {
    var _this2 = this;
    var ajaxCommands = this.commands;
    return Object.keys(response || {}).reduce(function (executionQueue, key) {
      return executionQueue.then(function () {
        var command = response[key].command;
        if (command && ajaxCommands[command]) {
          return ajaxCommands[command](_this2, response[key], status);
        }
      });
    }, Promise.resolve());
  };
  Drupal.Ajax.prototype.success = function (response, status) {
    var _this3 = this;
    if (this.progress.element) {
      $(this.progress.element).remove();
    }
    if (this.progress.object) {
      this.progress.object.stopMonitoring();
    }
    $(this.element).prop('disabled', false);
    var elementParents = $(this.element).parents('[data-drupal-selector]').addBack().toArray();
    var focusChanged = Object.keys(response || {}).some(function (key) {
      var _response$key = response[key],
        command = _response$key.command,
        method = _response$key.method;
      return command === 'focusFirst' || command === 'invoke' && method === 'focus';
    });
    return this.commandExecutionQueue(response, status).then(function () {
      if (!focusChanged && _this3.element && !$(_this3.element).data('disable-refocus')) {
        var target = false;
        for (var n = elementParents.length - 1; !target && n >= 0; n--) {
          target = document.querySelector("[data-drupal-selector=\"".concat(elementParents[n].getAttribute('data-drupal-selector'), "\"]"));
        }
        if (target) {
          $(target).trigger('focus');
        }
      }
      if (_this3.$form && document.body.contains(_this3.$form.get(0))) {
        var settings = _this3.settings || drupalSettings;
        Drupal.attachBehaviors(_this3.$form.get(0), settings);
      }
      _this3.settings = null;
    }).catch(function (error) {
      return console.error(Drupal.t('An error occurred during the execution of the Ajax response: !error', {
        '!error': error
      }));
    });
  };
  Drupal.Ajax.prototype.getEffect = function (response) {
    var type = response.effect || this.effect;
    var speed = response.speed || this.speed;
    var effect = {};
    if (type === 'none') {
      effect.showEffect = 'show';
      effect.hideEffect = 'hide';
      effect.showSpeed = '';
    } else if (type === 'fade') {
      effect.showEffect = 'fadeIn';
      effect.hideEffect = 'fadeOut';
      effect.showSpeed = speed;
    } else {
      effect.showEffect = "".concat(type, "Toggle");
      effect.hideEffect = "".concat(type, "Toggle");
      effect.showSpeed = speed;
    }
    return effect;
  };
  Drupal.Ajax.prototype.error = function (xmlhttprequest, uri, customMessage) {
    if (this.progress.element) {
      $(this.progress.element).remove();
    }
    if (this.progress.object) {
      this.progress.object.stopMonitoring();
    }
    $(this.wrapper).show();
    $(this.element).prop('disabled', false);
    if (this.$form && document.body.contains(this.$form.get(0))) {
      var settings = this.settings || drupalSettings;
      Drupal.attachBehaviors(this.$form.get(0), settings);
    }
    throw new Drupal.AjaxError(xmlhttprequest, uri, customMessage);
  };
  Drupal.theme.ajaxWrapperNewContent = function ($newContent, ajax, response) {
    return (response.effect || ajax.effect) !== 'none' && $newContent.filter(function (i) {
      return !($newContent[i].nodeName === '#comment' || $newContent[i].nodeName === '#text' && /^(\s|\n|\r)*$/.test($newContent[i].textContent));
    }).length > 1 ? Drupal.theme('ajaxWrapperMultipleRootElements', $newContent) : $newContent;
  };
  Drupal.theme.ajaxWrapperMultipleRootElements = function ($elements) {
    return $('<div></div>').append($elements);
  };
  Drupal.AjaxCommands = function () {};
  Drupal.AjaxCommands.prototype = {
    insert: function insert(ajax, response) {
      var $wrapper = response.selector ? $(response.selector) : $(ajax.wrapper);
      var method = response.method || ajax.method;
      var effect = ajax.getEffect(response);
      var settings = response.settings || ajax.settings || drupalSettings;
      var $newContent = $($.parseHTML(response.data, document, true));
      $newContent = Drupal.theme('ajaxWrapperNewContent', $newContent, ajax, response);
      switch (method) {
        case 'html':
        case 'replaceWith':
        case 'replaceAll':
        case 'empty':
        case 'remove':
          Drupal.detachBehaviors($wrapper.get(0), settings);
          break;
        default:
          break;
      }
      $wrapper[method]($newContent);
      if (effect.showEffect !== 'show') {
        $newContent.hide();
      }
      var $ajaxNewContent = $newContent.find('.ajax-new-content');
      if ($ajaxNewContent.length) {
        $ajaxNewContent.hide();
        $newContent.show();
        $ajaxNewContent[effect.showEffect](effect.showSpeed);
      } else if (effect.showEffect !== 'show') {
        $newContent[effect.showEffect](effect.showSpeed);
      }
      if ($newContent.parents('html').length) {
        $newContent.each(function (index, element) {
          if (element.nodeType === Node.ELEMENT_NODE) {
            Drupal.attachBehaviors(element, settings);
          }
        });
      }
    },
    remove: function remove(ajax, response, status) {
      var settings = response.settings || ajax.settings || drupalSettings;
      $(response.selector).each(function () {
        Drupal.detachBehaviors(this, settings);
      }).remove();
    },
    changed: function changed(ajax, response, status) {
      var $element = $(response.selector);
      if (!$element.hasClass('ajax-changed')) {
        $element.addClass('ajax-changed');
        if (response.asterisk) {
          $element.find(response.asterisk).append(" <abbr class=\"ajax-changed\" title=\"".concat(Drupal.t('Changed'), "\">*</abbr> "));
        }
      }
    },
    alert: function alert(ajax, response, status) {
      window.alert(response.text);
    },
    announce: function announce(ajax, response) {
      if (response.priority) {
        Drupal.announce(response.text, response.priority);
      } else {
        Drupal.announce(response.text);
      }
    },
    redirect: function redirect(ajax, response, status) {
      window.location = response.url;
    },
    css: function css(ajax, response, status) {
      $(response.selector).css(response.argument);
    },
    settings: function settings(ajax, response, status) {
      var ajaxSettings = drupalSettings.ajax;
      if (ajaxSettings) {
        Drupal.ajax.expired().forEach(function (instance) {
          if (instance.selector) {
            var selector = instance.selector.replace('#', '');
            if (selector in ajaxSettings) {
              delete ajaxSettings[selector];
            }
          }
        });
      }
      if (response.merge) {
        $.extend(true, drupalSettings, response.settings);
      } else {
        ajax.settings = response.settings;
      }
    },
    data: function data(ajax, response, status) {
      $(response.selector).data(response.name, response.value);
    },
    focusFirst: function focusFirst(ajax, response, status) {
      var focusChanged = false;
      var container = document.querySelector(response.selector);
      if (container) {
        var tabbableElements = tabbable(container);
        if (tabbableElements.length) {
          tabbableElements[0].focus();
          focusChanged = true;
        } else if (isFocusable(container)) {
          container.focus();
          focusChanged = true;
        }
      }
      if (ajax.hasOwnProperty('element') && !focusChanged) {
        ajax.element.focus();
      }
    },
    invoke: function invoke(ajax, response, status) {
      var $element = $(response.selector);
      $element[response.method].apply($element, _toConsumableArray(response.args));
    },
    restripe: function restripe(ajax, response, status) {
      $(response.selector).find('> tbody > tr:visible, > tr:visible').removeClass('odd even').filter(':even').addClass('odd').end().filter(':odd').addClass('even');
    },
    update_build_id: function update_build_id(ajax, response, status) {
      document.querySelectorAll("input[name=\"form_build_id\"][value=\"".concat(response.old, "\"]")).forEach(function (item) {
        item.value = response.new;
      });
    },
    add_css: function add_css(ajax, response, status) {
      $('head').prepend(response.data);
    },
    message: function message(ajax, response) {
      var messages = new Drupal.Message(document.querySelector(response.messageWrapperQuerySelector));
      if (response.clearPrevious) {
        messages.clear();
      }
      messages.add(response.message, response.messageOptions);
    },
    add_js: function add_js(ajax, response, status) {
      var parentEl = document.querySelector(response.selector || 'body');
      var settings = ajax.settings || drupalSettings;
      var allUniqueBundleIds = response.data.map(function (script) {
        var uniqueBundleId = script.src + ajax.instanceIndex;
        loadjs(script.src, uniqueBundleId, {
          async: false,
          before: function before(path, scriptEl) {
            Object.keys(script).forEach(function (attributeKey) {
              scriptEl.setAttribute(attributeKey, script[attributeKey]);
            });
            parentEl.appendChild(scriptEl);
            return false;
          }
        });
        return uniqueBundleId;
      });
      return new Promise(function (resolve, reject) {
        loadjs.ready(allUniqueBundleIds, {
          success: function success() {
            Drupal.attachBehaviors(parentEl, settings);
            resolve();
          },
          error: function error(depsNotFound) {
            var message = Drupal.t("The following files could not be loaded: @dependencies", {
              '@dependencies': depsNotFound.join(', ')
            });
            reject(message);
          }
        });
      });
    }
  };
  var stopEvent = function stopEvent(xhr, settings) {
    return xhr.getResponseHeader('X-Drupal-Ajax-Token') === '1' && settings.isInProgress && settings.isInProgress();
  };
  $.extend(true, $.event.special, {
    ajaxSuccess: {
      trigger: function trigger(event, xhr, settings) {
        if (stopEvent(xhr, settings)) {
          return false;
        }
      }
    },
    ajaxComplete: {
      trigger: function trigger(event, xhr, settings) {
        if (stopEvent(xhr, settings)) {
          $.active++;
          return false;
        }
      }
    }
  });
})(jQuery, window, Drupal, drupalSettings, loadjs, window.tabbable);;
(function (Drupal) {

  /**
   * Command to attach data using jQuery's data API.
   *
   * @param {Drupal.Ajax} [ajax]
   *   {@link Drupal.Ajax} object created by {@link Drupal.ajax}.
   * @param {object} response
   *   The response from the Ajax request.
   * @param {string} response.event_name
   *   The event name
   * @param {object} response.data
   *   The value of the event.
   */
  Drupal.AjaxCommands.prototype.gtagEvent = function (ajax, response) {
    gtag('event', response.event_name, response.data)
  }
})(Drupal);
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
Drupal.debounce = function (func, wait, immediate) {
  var timeout;
  var result;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var context = this;
    var later = function later() {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
      }
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
    }
    return result;
  };
};;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, Drupal, debounce) {
  var offsets = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
  function getRawOffset(el, edge) {
    var $el = $(el);
    var documentElement = document.documentElement;
    var displacement = 0;
    var horizontal = edge === 'left' || edge === 'right';
    var placement = $el.offset()[horizontal ? 'left' : 'top'];
    placement -= window["scroll".concat(horizontal ? 'X' : 'Y')] || document.documentElement["scroll".concat(horizontal ? 'Left' : 'Top')] || 0;
    switch (edge) {
      case 'top':
        displacement = placement + $el.outerHeight();
        break;
      case 'left':
        displacement = placement + $el.outerWidth();
        break;
      case 'bottom':
        displacement = documentElement.clientHeight - placement;
        break;
      case 'right':
        displacement = documentElement.clientWidth - placement;
        break;
      default:
        displacement = 0;
    }
    return displacement;
  }
  function calculateOffset(edge) {
    var edgeOffset = 0;
    var displacingElements = document.querySelectorAll("[data-offset-".concat(edge, "]"));
    var n = displacingElements.length;
    for (var i = 0; i < n; i++) {
      var el = displacingElements[i];
      if (el.style.display === 'none') {
        continue;
      }
      var displacement = parseInt(el.getAttribute("data-offset-".concat(edge)), 10);
      if (isNaN(displacement)) {
        displacement = getRawOffset(el, edge);
      }
      edgeOffset = Math.max(edgeOffset, displacement);
    }
    return edgeOffset;
  }
  function calculateOffsets() {
    return {
      top: calculateOffset('top'),
      right: calculateOffset('right'),
      bottom: calculateOffset('bottom'),
      left: calculateOffset('left')
    };
  }
  function displace(broadcast) {
    offsets = calculateOffsets();
    Drupal.displace.offsets = offsets;
    if (typeof broadcast === 'undefined' || broadcast) {
      $(document).trigger('drupalViewportOffsetChange', offsets);
    }
    return offsets;
  }
  Drupal.behaviors.drupalDisplace = {
    attach: function attach() {
      if (this.displaceProcessed) {
        return;
      }
      this.displaceProcessed = true;
      $(window).on('resize.drupalDisplace', debounce(displace, 200));
    }
  };
  Drupal.displace = displace;
  $.extend(Drupal.displace, {
    offsets: offsets,
    calculateOffset: calculateOffset
  });
})(jQuery, Drupal, Drupal.debounce);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, Drupal, _ref) {
  var isTabbable = _ref.isTabbable;
  $.extend($.expr[':'], {
    tabbable: function tabbable(element) {
      Drupal.deprecationError({
        message: 'The :tabbable selector is deprecated in Drupal 9.2.0 and will be removed in Drupal 11.0.0. Use the core/tabbable library instead. See https://www.drupal.org/node/3183730'
      });
      if (element.tagName === 'SUMMARY' || element.tagName === 'DETAILS') {
        var tabIndex = element.getAttribute('tabIndex');
        if (tabIndex === null || tabIndex < 0) {
          return false;
        }
      }
      return isTabbable(element);
    }
  });
})(jQuery, Drupal, window.tabbable);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($) {
  var cachedScrollbarWidth = null;
  var max = Math.max,
    abs = Math.abs;
  var regexHorizontal = /left|center|right/;
  var regexVertical = /top|center|bottom/;
  var regexOffset = /[+-]\d+(\.[\d]+)?%?/;
  var regexPosition = /^\w+/;
  var regexPercent = /%$/;
  var _position = $.fn.position;
  function getOffsets(offsets, width, height) {
    return [parseFloat(offsets[0]) * (regexPercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (regexPercent.test(offsets[1]) ? height / 100 : 1)];
  }
  function parseCss(element, property) {
    return parseInt($.css(element, property), 10) || 0;
  }
  function getDimensions(elem) {
    var raw = elem[0];
    if (raw.nodeType === 9) {
      return {
        width: elem.width(),
        height: elem.height(),
        offset: {
          top: 0,
          left: 0
        }
      };
    }
    if ($.isWindow(raw)) {
      return {
        width: elem.width(),
        height: elem.height(),
        offset: {
          top: elem.scrollTop(),
          left: elem.scrollLeft()
        }
      };
    }
    if (raw.preventDefault) {
      return {
        width: 0,
        height: 0,
        offset: {
          top: raw.pageY,
          left: raw.pageX
        }
      };
    }
    return {
      width: elem.outerWidth(),
      height: elem.outerHeight(),
      offset: elem.offset()
    };
  }
  var collisions = {
    fit: {
      left: function left(position, data) {
        var within = data.within;
        var withinOffset = within.isWindow ? within.scrollLeft : within.offset.left;
        var outerWidth = within.width;
        var collisionPosLeft = position.left - data.collisionPosition.marginLeft;
        var overLeft = withinOffset - collisionPosLeft;
        var overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset;
        var newOverRight;
        if (data.collisionWidth > outerWidth) {
          if (overLeft > 0 && overRight <= 0) {
            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
            position.left += overLeft - newOverRight;
          } else if (overRight > 0 && overLeft <= 0) {
            position.left = withinOffset;
          } else if (overLeft > overRight) {
            position.left = withinOffset + outerWidth - data.collisionWidth;
          } else {
            position.left = withinOffset;
          }
        } else if (overLeft > 0) {
          position.left += overLeft;
        } else if (overRight > 0) {
          position.left -= overRight;
        } else {
          position.left = max(position.left - collisionPosLeft, position.left);
        }
      },
      top: function top(position, data) {
        var within = data.within;
        var withinOffset = within.isWindow ? within.scrollTop : within.offset.top;
        var outerHeight = data.within.height;
        var collisionPosTop = position.top - data.collisionPosition.marginTop;
        var overTop = withinOffset - collisionPosTop;
        var overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset;
        var newOverBottom;
        if (data.collisionHeight > outerHeight) {
          if (overTop > 0 && overBottom <= 0) {
            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
            position.top += overTop - newOverBottom;
          } else if (overBottom > 0 && overTop <= 0) {
            position.top = withinOffset;
          } else if (overTop > overBottom) {
            position.top = withinOffset + outerHeight - data.collisionHeight;
          } else {
            position.top = withinOffset;
          }
        } else if (overTop > 0) {
          position.top += overTop;
        } else if (overBottom > 0) {
          position.top -= overBottom;
        } else {
          position.top = max(position.top - collisionPosTop, position.top);
        }
      }
    },
    flip: {
      left: function left(position, data) {
        var within = data.within;
        var withinOffset = within.offset.left + within.scrollLeft;
        var outerWidth = within.width;
        var offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left;
        var collisionPosLeft = position.left - data.collisionPosition.marginLeft;
        var overLeft = collisionPosLeft - offsetLeft;
        var overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft;
        var myOffset = data.my[0] === 'left' ? -data.elemWidth : data.my[0] === 'right' ? data.elemWidth : 0;
        var atOffset = data.at[0] === 'left' ? data.targetWidth : data.at[0] === 'right' ? -data.targetWidth : 0;
        var offset = -2 * data.offset[0];
        var newOverRight;
        var newOverLeft;
        if (overLeft < 0) {
          newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
          if (newOverRight < 0 || newOverRight < abs(overLeft)) {
            position.left += myOffset + atOffset + offset;
          }
        } else if (overRight > 0) {
          newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
          if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
            position.left += myOffset + atOffset + offset;
          }
        }
      },
      top: function top(position, data) {
        var within = data.within;
        var withinOffset = within.offset.top + within.scrollTop;
        var outerHeight = within.height;
        var offsetTop = within.isWindow ? within.scrollTop : within.offset.top;
        var collisionPosTop = position.top - data.collisionPosition.marginTop;
        var overTop = collisionPosTop - offsetTop;
        var overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop;
        var top = data.my[1] === 'top';
        var myOffset = top ? -data.elemHeight : data.my[1] === 'bottom' ? data.elemHeight : 0;
        var atOffset = data.at[1] === 'top' ? data.targetHeight : data.at[1] === 'bottom' ? -data.targetHeight : 0;
        var offset = -2 * data.offset[1];
        var newOverTop;
        var newOverBottom;
        if (overTop < 0) {
          newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
          if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
            position.top += myOffset + atOffset + offset;
          }
        } else if (overBottom > 0) {
          newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
          if (newOverTop > 0 || abs(newOverTop) < overBottom) {
            position.top += myOffset + atOffset + offset;
          }
        }
      }
    },
    flipfit: {
      left: function left() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        collisions.flip.left.apply(this, args);
        collisions.fit.left.apply(this, args);
      },
      top: function top() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        collisions.flip.top.apply(this, args);
        collisions.fit.top.apply(this, args);
      }
    }
  };
  $.position = {
    scrollbarWidth: function scrollbarWidth() {
      if (cachedScrollbarWidth !== undefined) {
        return cachedScrollbarWidth;
      }
      var div = $('<div ' + "style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" + "<div style='height:100px;width:auto;'></div></div>");
      var innerDiv = div.children()[0];
      $('body').append(div);
      var w1 = innerDiv.offsetWidth;
      div.css('overflow', 'scroll');
      var w2 = innerDiv.offsetWidth;
      if (w1 === w2) {
        w2 = div[0].clientWidth;
      }
      div.remove();
      cachedScrollbarWidth = w1 - w2;
      return cachedScrollbarWidth;
    },
    getScrollInfo: function getScrollInfo(within) {
      var overflowX = within.isWindow || within.isDocument ? '' : within.element.css('overflow-x');
      var overflowY = within.isWindow || within.isDocument ? '' : within.element.css('overflow-y');
      var hasOverflowX = overflowX === 'scroll' || overflowX === 'auto' && within.width < within.element[0].scrollWidth;
      var hasOverflowY = overflowY === 'scroll' || overflowY === 'auto' && within.height < within.element[0].scrollHeight;
      return {
        width: hasOverflowY ? $.position.scrollbarWidth() : 0,
        height: hasOverflowX ? $.position.scrollbarWidth() : 0
      };
    },
    getWithinInfo: function getWithinInfo(element) {
      var withinElement = $(element || window);
      var isWindow = $.isWindow(withinElement[0]);
      var isDocument = !!withinElement[0] && withinElement[0].nodeType === 9;
      var hasOffset = !isWindow && !isDocument;
      return {
        element: withinElement,
        isWindow: isWindow,
        isDocument: isDocument,
        offset: hasOffset ? $(element).offset() : {
          left: 0,
          top: 0
        },
        scrollLeft: withinElement.scrollLeft(),
        scrollTop: withinElement.scrollTop(),
        width: withinElement.outerWidth(),
        height: withinElement.outerHeight()
      };
    }
  };
  $.fn.position = function (options) {
    if (!options || !options.of) {
      return _position.apply(this, arguments);
    }
    options = $.extend({}, options);
    var within = $.position.getWithinInfo(options.within);
    var scrollInfo = $.position.getScrollInfo(within);
    var collision = (options.collision || 'flip').split(' ');
    var offsets = {};
    var target = typeof options.of === 'string' ? $(document).find(options.of) : $(options.of);
    var dimensions = getDimensions(target);
    var targetWidth = dimensions.width;
    var targetHeight = dimensions.height;
    var targetOffset = dimensions.offset;
    if (target[0].preventDefault) {
      options.at = 'left top';
    }
    var basePosition = $.extend({}, targetOffset);
    $.each(['my', 'at'], function () {
      var pos = (options[this] || '').split(' ');
      if (pos.length === 1) {
        pos = regexHorizontal.test(pos[0]) ? pos.concat(['center']) : regexVertical.test(pos[0]) ? ['center'].concat(pos) : ['center', 'center'];
      }
      pos[0] = regexHorizontal.test(pos[0]) ? pos[0] : 'center';
      pos[1] = regexVertical.test(pos[1]) ? pos[1] : 'center';
      var horizontalOffset = regexOffset.exec(pos[0]);
      var verticalOffset = regexOffset.exec(pos[1]);
      offsets[this] = [horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0];
      options[this] = [regexPosition.exec(pos[0])[0], regexPosition.exec(pos[1])[0]];
    });
    if (collision.length === 1) {
      collision[1] = collision[0];
    }
    if (options.at[0] === 'right') {
      basePosition.left += targetWidth;
    } else if (options.at[0] === 'center') {
      basePosition.left += targetWidth / 2;
    }
    if (options.at[1] === 'bottom') {
      basePosition.top += targetHeight;
    } else if (options.at[1] === 'center') {
      basePosition.top += targetHeight / 2;
    }
    var atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
    basePosition.left += atOffset[0];
    basePosition.top += atOffset[1];
    return this.each(function () {
      var using;
      var elem = $(this);
      var elemWidth = elem.outerWidth();
      var elemHeight = elem.outerHeight();
      var marginLeft = parseCss(this, 'marginLeft');
      var marginTop = parseCss(this, 'marginTop');
      var collisionWidth = elemWidth + marginLeft + parseCss(this, 'marginRight') + scrollInfo.width;
      var collisionHeight = elemHeight + marginTop + parseCss(this, 'marginBottom') + scrollInfo.height;
      var position = $.extend({}, basePosition);
      var myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
      if (options.my[0] === 'right') {
        position.left -= elemWidth;
      } else if (options.my[0] === 'center') {
        position.left -= elemWidth / 2;
      }
      if (options.my[1] === 'bottom') {
        position.top -= elemHeight;
      } else if (options.my[1] === 'center') {
        position.top -= elemHeight / 2;
      }
      position.left += myOffset[0];
      position.top += myOffset[1];
      var collisionPosition = {
        marginLeft: marginLeft,
        marginTop: marginTop
      };
      $.each(['left', 'top'], function (i, dir) {
        if (collisions[collision[i]]) {
          collisions[collision[i]][dir](position, {
            targetWidth: targetWidth,
            targetHeight: targetHeight,
            elemWidth: elemWidth,
            elemHeight: elemHeight,
            collisionPosition: collisionPosition,
            collisionWidth: collisionWidth,
            collisionHeight: collisionHeight,
            offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],
            my: options.my,
            at: options.at,
            within: within,
            elem: elem
          });
        }
      });
      if (options.using) {
        using = function using(props) {
          var left = targetOffset.left - position.left;
          var right = left + targetWidth - elemWidth;
          var top = targetOffset.top - position.top;
          var bottom = top + targetHeight - elemHeight;
          var feedback = {
            target: {
              element: target,
              left: targetOffset.left,
              top: targetOffset.top,
              width: targetWidth,
              height: targetHeight
            },
            element: {
              element: elem,
              left: position.left,
              top: position.top,
              width: elemWidth,
              height: elemHeight
            },
            horizontal: right < 0 ? 'left' : left > 0 ? 'right' : 'center',
            vertical: bottom < 0 ? 'top' : top > 0 ? 'bottom' : 'middle'
          };
          if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
            feedback.horizontal = 'center';
          }
          if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
            feedback.vertical = 'middle';
          }
          if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
            feedback.important = 'horizontal';
          } else {
            feedback.important = 'vertical';
          }
          options.using.call(this, props, feedback);
        };
      }
      elem.offset($.extend(position, {
        using: using
      }));
    });
  };
  if (!$.hasOwnProperty('ui')) {
    $.ui = {};
  }
  $.ui.position = collisions;
})(jQuery);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, Drupal, drupalSettings) {
  drupalSettings.dialog = {
    autoOpen: true,
    dialogClass: '',
    buttonClass: 'button',
    buttonPrimaryClass: 'button--primary',
    close: function close(event) {
      Drupal.dialog(event.target).close();
      Drupal.detachBehaviors(event.target, null, 'unload');
    }
  };
  Drupal.dialog = function (element, options) {
    var undef;
    var $element = $(element);
    var dialog = {
      open: false,
      returnValue: undef
    };
    function openDialog(settings) {
      settings = $.extend({}, drupalSettings.dialog, options, settings);
      $(window).trigger('dialog:beforecreate', [dialog, $element, settings]);
      $element.dialog(settings);
      dialog.open = true;
      $(window).trigger('dialog:aftercreate', [dialog, $element, settings]);
    }
    function closeDialog(value) {
      $(window).trigger('dialog:beforeclose', [dialog, $element]);
      $element.dialog('close');
      dialog.returnValue = value;
      dialog.open = false;
      $(window).trigger('dialog:afterclose', [dialog, $element]);
    }
    dialog.show = function () {
      openDialog({
        modal: false
      });
    };
    dialog.showModal = function () {
      openDialog({
        modal: true
      });
    };
    dialog.close = closeDialog;
    return dialog;
  };
})(jQuery, Drupal, drupalSettings);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, Drupal, drupalSettings, debounce, displace) {
  drupalSettings.dialog = $.extend({
    autoResize: true,
    maxHeight: '95%'
  }, drupalSettings.dialog);
  function resetPosition(options) {
    var offsets = displace.offsets;
    var left = offsets.left - offsets.right;
    var top = offsets.top - offsets.bottom;
    var leftString = "".concat((left > 0 ? '+' : '-') + Math.abs(Math.round(left / 2)), "px");
    var topString = "".concat((top > 0 ? '+' : '-') + Math.abs(Math.round(top / 2)), "px");
    options.position = {
      my: "center".concat(left !== 0 ? leftString : '', " center").concat(top !== 0 ? topString : ''),
      of: window
    };
    return options;
  }
  function resetSize(event) {
    var positionOptions = ['width', 'height', 'minWidth', 'minHeight', 'maxHeight', 'maxWidth', 'position'];
    var adjustedOptions = {};
    var windowHeight = $(window).height();
    var option;
    var optionValue;
    var adjustedValue;
    for (var n = 0; n < positionOptions.length; n++) {
      option = positionOptions[n];
      optionValue = event.data.settings[option];
      if (optionValue) {
        if (typeof optionValue === 'string' && /%$/.test(optionValue) && /height/i.test(option)) {
          windowHeight -= displace.offsets.top + displace.offsets.bottom;
          adjustedValue = parseInt(0.01 * parseInt(optionValue, 10) * windowHeight, 10);
          if (option === 'height' && event.data.$element.parent().outerHeight() < adjustedValue) {
            adjustedValue = 'auto';
          }
          adjustedOptions[option] = adjustedValue;
        }
      }
    }
    if (!event.data.settings.modal) {
      adjustedOptions = resetPosition(adjustedOptions);
    }
    event.data.$element.dialog('option', adjustedOptions).trigger('dialogContentResize');
  }
  $(window).on({
    'dialog:aftercreate': function dialogAftercreate(event, dialog, $element, settings) {
      var autoResize = debounce(resetSize, 20);
      var eventData = {
        settings: settings,
        $element: $element
      };
      if (settings.autoResize === true || settings.autoResize === 'true') {
        $element.dialog('option', {
          resizable: false,
          draggable: false
        }).dialog('widget').css('position', 'fixed');
        $(window).on('resize.dialogResize scroll.dialogResize', eventData, autoResize).trigger('resize.dialogResize');
        $(document).on('drupalViewportOffsetChange.dialogResize', eventData, autoResize);
      }
    },
    'dialog:beforeclose': function dialogBeforeclose(event, dialog, $element) {
      $(window).off('.dialogResize');
      $(document).off('.dialogResize');
    }
  });
})(jQuery, Drupal, drupalSettings, Drupal.debounce, Drupal.displace);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, _ref) {
  var tabbable = _ref.tabbable,
    isTabbable = _ref.isTabbable;
  $.widget('ui.dialog', $.ui.dialog, {
    options: {
      buttonClass: 'button',
      buttonPrimaryClass: 'button--primary'
    },
    _createButtons: function _createButtons() {
      var opts = this.options;
      var primaryIndex;
      var index;
      var il = opts.buttons.length;
      for (index = 0; index < il; index++) {
        if (opts.buttons[index].primary && opts.buttons[index].primary === true) {
          primaryIndex = index;
          delete opts.buttons[index].primary;
          break;
        }
      }
      this._super();
      var $buttons = this.uiButtonSet.children().addClass(opts.buttonClass);
      if (typeof primaryIndex !== 'undefined') {
        $buttons.eq(index).addClass(opts.buttonPrimaryClass);
      }
    },
    _focusTabbable: function _focusTabbable() {
      var hasFocus = this._focusedElement ? this._focusedElement.get(0) : null;
      if (!hasFocus) {
        hasFocus = this.element.find('[autofocus]').get(0);
      }
      if (!hasFocus) {
        var $elements = [this.element, this.uiDialogButtonPane];
        for (var i = 0; i < $elements.length; i++) {
          var element = $elements[i].get(0);
          if (element) {
            var elementTabbable = tabbable(element);
            hasFocus = elementTabbable.length ? elementTabbable[0] : null;
          }
          if (hasFocus) {
            break;
          }
        }
      }
      if (!hasFocus) {
        var closeBtn = this.uiDialogTitlebarClose.get(0);
        hasFocus = closeBtn && isTabbable(closeBtn) ? closeBtn : null;
      }
      if (!hasFocus) {
        hasFocus = this.uiDialog.get(0);
      }
      $(hasFocus).eq(0).trigger('focus');
    }
  });
})(jQuery, window.tabbable);;
/*! js-cookie v3.0.1 | MIT */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self,function(){var n=e.Cookies,o=e.Cookies=t();o.noConflict=function(){return e.Cookies=n,o}}())}(this,(function(){"use strict";function e(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)e[o]=n[o]}return e}return function t(n,o){function r(t,r,i){if("undefined"!=typeof document){"number"==typeof(i=e({},o,i)).expires&&(i.expires=new Date(Date.now()+864e5*i.expires)),i.expires&&(i.expires=i.expires.toUTCString()),t=encodeURIComponent(t).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var c="";for(var u in i)i[u]&&(c+="; "+u,!0!==i[u]&&(c+="="+i[u].split(";")[0]));return document.cookie=t+"="+n.write(r,t)+c}}return Object.create({set:r,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var t=document.cookie?document.cookie.split("; "):[],o={},r=0;r<t.length;r++){var i=t[r].split("="),c=i.slice(1).join("=");try{var u=decodeURIComponent(i[0]);if(o[u]=n.read(c,u),e===u)break}catch(e){}}return e?o[e]:o}},remove:function(t,n){r(t,"",e({},n,{expires:-1}))},withAttributes:function(n){return t(this.converter,e({},this.attributes,n))},withConverter:function(n){return t(e({},this.converter,n),this.attributes)}},{attributes:{value:Object.freeze(o)},converter:{value:Object.freeze(n)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"})}));
;
/**
 * @file
 * Custom JS for utility.
 */
window.Worksheet = window.Worksheet || {};

(function (Worksheet) {
  'use strict';

  Worksheet.utility = Worksheet.utility || {};

  Worksheet.utility.replaceSpecialChars = function (text) {
    let newText = text;
    if (typeof newText === 'string' && newText.length > 0) {
      newText = newText.split("$").join("'");
      newText = newText.split("#").join('"');
    }
    return newText;
  };

  Worksheet.utility.prepareTextToSave = function (text) {
    let newText = text;
    newText = newText.replace(/(?:\r\n|\r|\n)/g, '<br>');
    newText = newText.replace(/\t/g, ' ');
    newText = newText.split("'").join("$");
    newText = newText.split('"').join("#");
    newText = newText.replace(/\\/g, "/");
    return newText;
  };

  Worksheet.utility.getProperty = function (value, defaultValue = '', prefix = '', suffix = '') {
    if (typeof value !== 'undefined') {
      return suffix + value + prefix;
    }

    return suffix + defaultValue + prefix;
  };

  Worksheet.utility.parseJSON = function (data) {
    let output = false;
    try {
      output = JSON.parse(data);
    } catch(e) {
    }
    return output;
  };

  Worksheet.utility.processText = function (text) {
    let newText = text;
    newText = newText.split("´").join("'");
    newText = newText.split("’").join("'");
    newText = newText.split("‘").join("'");
    newText = newText.split("&nbsp;").join(" ");
    newText = newText.split("<br>").join(" ");
    newText = newText.split("\n").join(" ");
    newText = newText.replace(/\s\s+/g, ' ');
    newText = newText.split("/ ").join("/");
    newText = newText.split(" /").join("/");
    newText = newText.split("./").join("/");
    newText = newText.split(" /").join("/");
    newText = newText.split("/* ").join("/*");
    newText = newText.split("'").join("$");
    newText = newText.split('"').join("#");
    newText = newText.split(' :').join(":");
    newText = newText.split(' ,').join(",");
    newText = newText.split(' .').join(".");
    newText = newText.split(' ;').join(";");
    newText = newText.split(': ').join(":");
    newText = newText.split(', ').join(",");
    newText = newText.split('. ').join(".");
    newText = newText.split('; ').join(";");
    newText = newText.split("  ").join(" ");
    newText = newText.split("( ").join("(");
    newText = newText.split(" )").join(")");
    newText = newText.split("´").join("'");
    newText = newText.split("’").join("'");
    newText = newText.split("‘").join("'");
    newText = newText.replace(/\\/g, "/");

    newText = newText.replace(/\( transparent/ig, "(transparent");
    newText = newText.replace(/transparent \)/ig, "transparent)");
    newText = newText.replace("(transparent) ", "(transparent)");
    newText = newText.replace("(transparent)", "");
    newText = newText.replace(/\(rate:.*?\)/, '');

    newText = newText.replace(/playmp3:/ig, 'playmp3:');
    newText = newText.replace(/join:/ig, 'join:');
    newText = newText.replace(/drag:/ig, 'drag:');
    newText = newText.replace(/drop:/ig, 'drop:');
    newText = newText.replace(/choose:/ig, 'choose:');
    newText = newText.replace(/select:/ig, 'select:');
    newText = newText.replace(/tick:/ig, 'tick:');
    newText = newText.replace(/link:/ig, 'link:');
    newText = newText.replace(/speak:/ig, 'speak:');
    newText = newText.replace(/listen:/ig, 'listen:');
    newText = newText.replace(/value:/ig, 'value:');

    newText = newText.replace("select: ", "select:");
    newText = newText.replace("tick: ", "tick:");
    newText = newText.replace("choose: ", "choose:");
    newText = newText.replace("speak: ", "speak:");
    newText = newText.replace("listen: ", "listen:");
    newText = newText.replace("drag: ", "drag:");
    newText = newText.replace("drop: ", "drop:");
    newText = newText.replace("join: ", "join:");
    newText = newText.replace("link: ", "link:");
    newText = newText.replace("playmp3: ", "playmp3:");
    newText = newText.replace("value: ", "value:");

    newText = newText.replace(/^\s*|\s*$/g, "");

    if (newText.length > 1) {
      newText = newText.replace(/\s*[.]$/g, "");
    }

    return newText;
  };

  Worksheet.utility.removeSigns = function (text) {
    let newText = text;
    newText = newText.split("?").join(" ");
    newText = newText.split("¿").join(" ");
    newText = newText.split(",").join(" ");
    newText = newText.split(".").join(" ");
    newText = newText.split(";").join(" ");
    newText = newText.split(":").join(" ");
    newText = newText.split("-").join(" ");
    newText = newText.split("(").join(" ");
    newText = newText.split(")").join(" ");
    newText = newText.split("¡").join(" ");
    newText = newText.split("!").join(" ");
    newText = newText.replace(/^\s*|\s*$/g,"");
    newText = newText.replace(/\s\s+/g, ' ');
    return newText;
  };

  Worksheet.utility.removeAccents = function (text) {
    let newText = text;
    newText = newText.split("á").join("a");
    newText = newText.split("é").join("e");
    newText = newText.split("í").join("i");
    newText = newText.split("ó").join("o");
    newText = newText.split("ú").join("u");
    newText = newText.split("à").join("a");
    newText = newText.split("è").join("e");
    newText = newText.split("ì").join("i");
    newText = newText.split("ò").join("o");
    newText = newText.split("ù").join("u");
    newText = newText.split("ä").join("a");
    newText = newText.split("ë").join("e");
    newText = newText.split("ï").join("i");
    newText = newText.split("ö").join("o");
    newText = newText.split("ü").join("u");
    newText = newText.split("â").join("a");
    newText = newText.split("ê").join("e");
    newText = newText.split("î").join("i");
    newText = newText.split("ô").join("o");
    newText = newText.split("û").join("u");
    return newText;
  };

  Worksheet.utility.getStyles = function (item, output = 'string') {

    let style = {
      fontFamily: Worksheet.utility.getProperty(item[7], 'Arial'),
      fontSize: Worksheet.utility.getProperty(item[8], '14', 'px'),
      color: Worksheet.utility.getProperty(item[9], '0000CC', '', '#'),
      backgroundColor: 'rgba(' + Worksheet.utility.getProperty(item[10], 255) + ',' + Worksheet.utility.getProperty(item[11], 255) + ',' + Worksheet.utility.getProperty(item[12], 255) + ',' + Worksheet.utility.getProperty(item[13], 0.5) + ')',
      borderColor: Worksheet.utility.getProperty(item[14], 'C0C0C0', '', '#'),
      borderWidth: Worksheet.utility.getProperty(item[17], '1', 'px'),
      borderRadius: Worksheet.utility.getProperty(item[18], '4', 'px'),
      textAlign: Worksheet.utility.getProperty(item[15], 'center'),
    }
    if (style.textAlign.length <= 1) {
      style.textAlign = "center";
    }
    if (output === 'string') {
      return 'font-family:' + style.fontFamily + ';font-size:' + style.fontSize + ';color:' + style.color + ';background-color:' + style.backgroundColor + ';border-width:' + style.borderWidth + ';border-color:' + style.borderColor + ';border-radius:' + style.roundedCorners +';text-align:' + style.textAlign;
    }

    return style;
  };

  /**
   * Get YouTube video ID from URL.
   *
   * @param value
   *   YouTube URL.
   * @param isOldInput
   *   If true, the URL is from the old input - with HTML tags.
   *
   * @returns {{offset: string, id: string}|null}
   *   Object with video ID and offset.
   */
  Worksheet.utility.getYouTubeUrl = function (value, isOldInput) {
    if (typeof value === 'string') {
      let regExp;
      if (isOldInput) {
        regExp = /^.*(?:youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=|\?v=)([^#\&\?]*).*?(?:&|\?)*(?:t=([0-9]+)s)?(?:.*?)/
      } else {
        regExp = /^(?:https?:\/\/)?(?:m\.|www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))(.{11})(?:.*?)(?:&|\?)*(?:t=([0-9]+)s)?(?:.*?)$/;
      }
      let match = value.match(regExp);
      if (match && match[1].length === 11) {
        return {
          'id': match[1],
          'offset': typeof match[2] !== 'undefined' ? match[2] : '0'
        };
      }
    }

    return null;
  };

  Worksheet.utility.sortByWeightElement = function (elementA, elementB) {
    if (typeof elementA.weight === 'undefined') {
      elementA.weight = 0;
    }
    if (typeof elementB.weight === 'undefined') {
      elementB.weight = 0;
    }
    if (elementA.weight > elementB.weight) {
      return -1;
    }
    if (elementA.weight < elementB.weight) {
      return 1;
    }
    return 0;
  };

  Worksheet.utility.sortSidebarByWeightElement = function (elementA, elementB) {
    if (typeof elementA.sidebarWeight === 'undefined') {
      elementA.sidebarWeight = 0;
    }
    if (typeof elementB.sidebarWeight === 'undefined') {
      elementB.sidebarWeight = 0;
    }
    if (elementA.sidebarWeight > elementB.sidebarWeight) {
      return -1;
    }
    if (elementA.sidebarWeight < elementB.sidebarWeight) {
      return 1;
    }
    return 0;
  };

  Worksheet.utility.isNotEmpty = function (element) {
    return typeof element !== 'undefined' &&
      element !== null &&
      element !== '';
  }

})(window.Worksheet);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Single Choice'),
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("choose:") == 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let options = text.replace("choose:", "").split("/"),
        optionsHtml = '<option></option>',
        style = Worksheet.utility.getStyles(item);
      for (let k = 0; k < options.length; k++) {
        let attributes = '';
        if (k + 1 === parseInt(item[5])) {
          attributes = ' selected';
        }

        if (Element.parent.settings.checkCorrectValues) {
          if (Element.parent.settings.showRightAnswers) {
            if (options[k].indexOf('*') === 0) {
              attributes += ' class="!bg-green-120"';
              if (Element.parent.settings.showAnswers) {
                attributes += ' selected';
              }
            } else {
              attributes += ' class="!bg-red-900"';
            }
          }
        }

        if (options[k].indexOf("*") === 0) {
          optionsHtml += '<option value="right"' + attributes + '>' + Worksheet.utility.replaceSpecialChars(options[k].substring(1)) + '</option>';
        } else {
          optionsHtml += '<option' + attributes + '>' + Worksheet.utility.replaceSpecialChars(options[k]) + '</option>';
        }
      }
      const positionStyles = `width: ${item[4]}px; height: ${item[3]}px; top: ${item[1]}px; left: ${item[2]}px;`;
      let $select = $('<select />', {
        'class': 'worksheet-selectbox w-full h-full opacity-100',
        'style': style
      });

      if (Element.parent.settings.showRightAnswers && Element.parent.settings.showAnswers) {
        $select.addClass('bg-green-120');
      } else if (Element.parent.settings.checkCorrectValues) {
        if (Element.parent.data.correctValues[pos] === "1") {
          $select.addClass('!bg-green-120');
        } else {
          $select.addClass('!bg-red-900');
        }
      }
      $select.on('change', { pos: pos }, this._saveElement);
      if (Element.parent.settings.checkCorrectValues) {
        $select.attr('disabled', 'disabled');
      }
      $select.html(optionsHtml);

      $('#worksheet-preview-elements', this.parent.context).append($select);

      const tooltipText = options.map(option => {
        if (option.startsWith('*')) {
          return option.replace('*', '')
        }

        return null
      }).filter(Boolean);

      $select.wrap(`<div class="absolute" style="${positionStyles}" />`);
      if (
        Element.parent.settings.showRightAnswers &&
        Element.parent.settings.checkCorrectValues &&
        Element.parent.data.correctValues[pos] !== '1'
      ) {
        Element.parent.createTooltip($select.parent(), tooltipText);
      }
    },
    validation: function (item, pos, text) {
      if (text.indexOf("*") > 0) {
        Element.parent.data.answersTotal++;
        let options = text.replace("choose:", "").split("/");
        let item = options[Element.parent.data.tempJSON[pos][5] -1];
        if (typeof item === 'string' && item.indexOf('*') === 0) {
          Element.parent.data.questionsTotal++;
          Element.parent.data.correctValues[pos] = "1";
        }
      }
    },
    _saveElement: function (event) {
      let pos = event.data.pos;
      Element.parent.data.tempJSON[pos][5] = $('option:selected', this).index();
      Element.parent.setStartTime();
      localStorage.setItem("worksheetContent", JSON.stringify(Element.parent.data.tempJSON));
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, drupalSettings, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Drag'),
    parent: {},
    isStudent: false,
    positionLeft: 0,
    positionTop: 0,
    offsetLeft: 0,
    offsetTop: 0,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("drag:") == 0;
    },
    renderPreviewElement: async function (item, pos, text) {
      let offsetTop = 0,
        finalImage = $('#worksheet-medias img', this.parent.context).first().attr('src');
      $('#worksheet-medias img', this.parent.context).each(async function () {
        while (!this.complete) {
          await Element._delay(50);
        }
        if (item[1] > $(this).position().top) {
          offsetTop = $(this).position().top;
          finalImage = $(this).attr('src');
        }
      });

      let backgroundOffset = item[1] - offsetTop / Element.parent.data.zoom;
      let $blankDiv = $('<div />', {
        'class': 'worksheet-blank-div',
        'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px',
      });
      let $div = $('<div />', {
        'class': 'worksheet-draggable-div',
        'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px;background-position:-' + item[2] + 'px -' + backgroundOffset + 'px;background-image: url(' + finalImage + ')'
      });
      if (Worksheet.utility.isNotEmpty(Element.parent.data.tempJSON[pos][5])) {
        let separatedElements = Element.parent.data.tempJSON[pos][5].split('@');
        if (separatedElements.length > 1) {
          $div.css({
            top: parseInt(separatedElements[0]) + 'px',
            left: parseInt(separatedElements[1]) + 'px',
          });
        }
      }
      if (Element.parent.settings.showRightAnswers && Element.parent.settings.showAnswers) {
        let dragNumber = text.split('drag:').join("").split(" ").join("");
        dragNumber = dragNumber.toLowerCase();
        let alreadyPlaced = false,
          elementsCount = Element._getElementsCount();
        if (typeof elementsCount['drag:' + dragNumber] !== 'undefined' && typeof elementsCount['drop:' + dragNumber] !== 'undefined' && elementsCount['drop:' + dragNumber] >= elementsCount['drag:' + dragNumber]) {
          for (let h = 0; h < Element.parent.data.tempJSON.length; h++) {
            if (!alreadyPlaced && Element.parent.data.dropElements.indexOf("," + String(h) + ",") < 0) {
              let subText = Worksheet.utility.prepareTextToSave(Element.parent.data.tempJSON[h][0]);
              subText = subText.split(" ").join("");
              subText = subText.toLowerCase();
              if (subText.indexOf('drop:') === 0) {
                let subDropNumber = subText.split('drop:').join("");
                if (subDropNumber === dragNumber) {
                  $div.css({
                    'top': Element.parent.data.tempJSON[h][1],
                    'left': Element.parent.data.tempJSON[h][2],
                  })
                  alreadyPlaced = true;
                  Element.parent.data.dropElements += String(h) + ",";
                }
              }
            }
          }
        } else {
          for (let h = 0; h < Element.parent.data.tempJSON.length; h++) {
            if (!alreadyPlaced && Element.parent.data.dropElements.indexOf("," + String(h) + ",") < 0) {
              let subText = Worksheet.utility.prepareTextToSave(Element.parent.data.tempJSON[h][0]);
              subText = subText.split(" ").join("");
              subText = subText.toLowerCase();
              if (subText.indexOf('drop:') === 0) {
                let subDropNumber = subText.split('drop:').join("");
                if (subDropNumber === dragNumber) {
                  if (typeof Element.parent.data.countElements['position:' + subDropNumber] === 'undefined') {
                    Element.parent.data.countElements['position:' + subDropNumber] = Element._getDropPoint(Element.parent.data.tempJSON[h]);
                    Element.parent.data.countElements['position:' + subDropNumber].offsetLeft = 0;
                    Element.parent.data.countElements['position:' + subDropNumber].maxHeight = 0;
                  }
                  if (Element.parent.data.countElements['position:' + subDropNumber].offsetLeft + item[4] > Element.parent.data.tempJSON[h][4]) {
                    Element.parent.data.countElements['position:' + subDropNumber].offsetLeft = 0;
                    Element.parent.data.countElements['position:' + subDropNumber].top += Element.parent.data.countElements['position:' + subDropNumber].maxHeight  + 5;
                  }
                  if (Element.parent.data.countElements['position:' + subDropNumber].maxHeight < item[3]) {
                    Element.parent.data.countElements['position:' + subDropNumber].maxHeight = item[3];
                  }
                  $div.css({
                    'top': Element.parent.data.countElements['position:' + subDropNumber].top,
                    'left': (Element.parent.data.countElements['position:' + subDropNumber].left + Element.parent.data.countElements['position:' + subDropNumber].offsetLeft),
                  });
                  Element.parent.data.countElements['position:' + subDropNumber].offsetLeft += item[4] + 5;
                  alreadyPlaced = true;
                }
              }
            }
          }
        }
      } else if (Element.parent.settings.checkCorrectValues) {
        let dragCenterPoint = Element._getDragCenterPoint(pos);
        if (text.length > 5 && dragCenterPoint !== false) {
          $div.addClass('worksheet-drag-error');
          let dragElements = text.split(' ').join('');
          dragElements = dragElements.toLowerCase();
          let dragNumber = dragElements.split('drag:').join('');
          for (let h = 0; h < Element.parent.data.tempJSON.length; h++) {
            let subText = Worksheet.utility.processText(
              Worksheet.utility.getProperty(Element.parent.data.tempJSON[h][0]),
            );
            subText = subText.split(' ').join('');
            subText = subText.toLowerCase();
            if (subText.indexOf('drop:') === 0) {
              let subDropNumber = subText.split('drop:').join('');
              if (subDropNumber === dragNumber && Element._isInBox(Element._getDropPoint(Element.parent.data.tempJSON[h]), dragCenterPoint)) {
                $div.addClass('worksheet-drag-right').removeClass('worksheet-drag-error');
              }
            }
          }
        } else if (!Worksheet.utility.isNotEmpty(Element.parent.data.tempJSON[pos][5])) {
          $div.addClass('worksheet-drag-error');
        }
      } else {
        $div.css('cursor', 'move');
        $div.on('mousedown', {
          pos: pos,
          width: item[4],
          height: item[3],
          top: item[1],
          left: item[2]
        }, this._dragMousedown);
        $div.on('touchstart', {
          pos: pos,
          width: item[4],
          height: item[3],
          top: item[1],
          left: item[2]
        }, this._dragTouchStart);
      }
      $('#worksheet-preview-elements', this.parent.context).append($blankDiv);
      $('#worksheet-preview-elements', this.parent.context).append($div);
    },
    validation: function (item, pos, text) {
      if (text.length > 5 && typeof Element.parent.data.tempJSON[pos][5] !== 'undefined') {
        Element.parent.data.answersTotal++;
        let dragCenterPoint = Element._getDragCenterPoint(pos);
        if (dragCenterPoint === false) {
          return;
        }
        let dragElements = text.split(" ").join("");
        dragElements = dragElements.toLowerCase();
        let dropNumber = dragElements.split('drag:').join("");
        for (let h = 0; h < Element.parent.data.tempJSON.length; h++) {
          let subText = Worksheet.utility.processText(Worksheet.utility.getProperty(Element.parent.data.tempJSON[h][0]));
          subText = subText.split(" ").join("");
          subText = subText.toLowerCase();
          if (subText.indexOf('drop:') === 0) {
            let subDropNumber = subText.split('drop:').join("");
            if (subDropNumber === dropNumber) {
              if (Element._isInBox(Element._getDropPoint(Element.parent.data.tempJSON[h]), dragCenterPoint)) {
                Element.parent.data.questionsTotal++;
                Element.parent.data.correctValues[pos] = "1";
              }
            }
          }
        }
      }
    },
    _dragMousedown: function (event) {
      event.preventDefault();
      if (!Element.parent.data.checkedAnswers) {
        $(this).addClass('worksheet-draggable-div-active');
        event.data.$element = $(this);
        Element.parent.setStartTime();
        $(window).on('mousemove', event.data, Element._mouseMove).on('mouseup', event.data, Element._mouseUp);
      }
    },
    _dragTouchStart: function (event) {
      event.preventDefault();
      let $element = $(event.target);
      if ($element.hasClass('worksheet-draggable-div') && !Element.parent.data.checkedAnswers) {
        $element.addClass('worksheet-draggable-div-active');
        event.data.$element = $element;
        Element.parent.setStartTime();
        $(window).on('touchmove', event.data, Element._touchMove).on('touchend', event.data, Element._touchEnd);
      }
    },
    _mouseMove: function (event) {
      event.preventDefault();
      let $element = event.data.$element,
        valueY = event.pageY - parseInt($('#worksheet-preview', Element.parent.context).offset().top) - parseInt(event.data.height * Element.parent.data.zoom / 2),
        valueX = event.pageX - parseInt($('#worksheet-preview', Element.parent.context).offset().left) - parseInt(event.data.width * Element.parent.data.zoom / 2),
        posY =  parseInt($(Element.parent.element).offset().top) + parseInt($(Element.parent.element).height()) * Element.parent.data.zoom,
        posX =  parseInt($(Element.parent.element).offset().left) + parseInt($(Element.parent.element).width()) * Element.parent.data.zoom;


      if (event.pageY < posY && event.pageX < posX && valueX >= 0 && valueY >= 0) {
        Element.positionLeft = valueX;
        Element.positionTop = valueY;

        $element.css({
          'top': Element.positionTop / Element.parent.data.zoom + 'px',
          'left': Element.positionLeft / Element.parent.data.zoom + 'px',
        });

        let margins = Element._getMargins($element);
        $('.worksheet-drop-div', Element.parent.context).each(function () {
          if (Element._isValid($(this), margins)) {
            Element._setProperties($(this), $element);
          }
        });

        if (event.clientY >= (window.innerHeight - 40)) {
          document.body.scrollTop = (document.body.scrollTop + 5);
          document.documentElement.scrollTop = (document.documentElement.scrollTop + 5)
        }

        if (event.clientY <= 40) {
          document.body.scrollTop = (document.body.scrollTop - 5);
          document.documentElement.scrollTop = (document.documentElement.scrollTop - 5)
        }
      }

    },
    _touchMove: function (event) {
      event.preventDefault();
      let touch = event.targetTouches[0],
        $element = event.data.$element,
        valueY = touch.pageY - parseInt($('#worksheet-preview', Element.parent.context).offset().top) - parseInt(event.data.height * Element.parent.data.zoom / 2),
        valueX = touch.pageX - parseInt($('#worksheet-preview', Element.parent.context).offset().left) - parseInt(event.data.width * Element.parent.data.zoom / 2),
        posY =  parseInt($(Element.parent.element).offset().top) + parseInt($(Element.parent.element).height()) * Element.parent.data.zoom,
        posX =  parseInt($(Element.parent.element).offset().left) + parseInt($(Element.parent.element).width()) * Element.parent.data.zoom;


      if (touch.pageY < posY && touch.pageX < posX && valueX >= 0 && valueY >= 0) {
        Element.positionLeft = valueX;
        Element.positionTop = valueY;

        $element.css({
          'top': Element.positionTop / Element.parent.data.zoom + 'px',
          'left': Element.positionLeft / Element.parent.data.zoom + 'px',
        });
        let margins = Element._getMargins($element);
        $('.worksheet-drop-div', Element.parent.context).each(function () {
          if (Element._isValid($(this), margins)) {
            Element._setProperties($(this), $element);
          }
        });

        if (touch.screenY < 100 || touch.clientY < 100) {
          window.scrollBy(0, -5);
        }

        if (navigator.userAgent.toLowerCase().indexOf("android") > -1) {
          if ((screen.height - touch.screenY) < 100) {
            window.scrollBy(0, 5);
          }
        } else {
          if ((window.innerHeight - touch.clientY) < 100) {
            window.scrollBy(0, 5);
          }
        }
      }
    },
    _mouseUp: function (event) {
      $(window).off('mousemove', Element._mouseMove).off('mouseup', Element._mouseUp);
      let $element = event.data.$element,
        addDiv = 0,
        dragCenterPoint = {
          x: $element.position().left + parseInt($element.width() / 2),
          y: $element.position().top + parseInt($element.height() / 2)
        };
      $('.worksheet-drop-div', Element.parent.context).each(function () {
        let dropPoint = {
          left: $(this).position().left,
          top: $(this).position().top,
          right: $(this).position().left + parseInt($(this).width()),
          bottom: $(this).position().top + parseInt($(this).height()),
        };

        if (Element._isInBox(dropPoint, dragCenterPoint)) {
          Element.offsetTop = $element.position().top / Element.parent.data.zoom;
          Element.offsetLeft = $element.position().left / Element.parent.data.zoom;
          Element.parent.data.tempJSON[event.data.pos][5] = Element.offsetTop + "@" + Element.offsetLeft;
          localStorage.setItem("worksheetContent", JSON.stringify(Element.parent.data.tempJSON));
          addDiv = 1;
        }
      });

      $element.removeClass('worksheet-draggable-div-active');
      if (!addDiv) {
        $element.css({
          'top': event.data.top + 'px',
          'left': event.data.left + 'px',
        });
      }
    },
    _touchEnd: function (event) {
      $(window).off('touchmove', Element._touchMove).off('touchend', Element._touchEnd);
      let $element = event.data.$element,
        dragCenterPoint = {
          x: $element.position().left + parseInt($element.width() / 2),
          y: $element.position().top + parseInt($element.height() / 2)
        },
        addDiv = 0;
      $('.worksheet-drop-div', Element.parent.context).each(function () {
        let dropPoint = {
          left: $(this).position().left,
          top: $(this).position().top,
          right: $(this).position().left + parseInt($(this).width()),
          bottom: $(this).position().top + parseInt($(this).height()),
        };

        if (Element._isInBox(dropPoint, dragCenterPoint)) {
          addDiv = 1;
          Element.offsetTop = $element.position().top / Element.parent.data.zoom;
          Element.offsetLeft = $element.position().left / Element.parent.data.zoom;

          Element.parent.data.tempJSON[event.data.pos][5] = Element.offsetTop + "@" + Element.offsetLeft;
          localStorage.setItem("worksheetContent", JSON.stringify(Element.parent.data.tempJSON));
        }
      });

      $element.removeClass('worksheet-draggable-div-active');
      if (!addDiv) {
        $element.css({
          'top': event.data.top + 'px',
          'left': event.data.left + 'px',
        });
      }
    },
    _isInBox: function (dropPoint, dragCenterPoint) {
      return (dragCenterPoint.y >= dropPoint.top && dragCenterPoint.x >= dropPoint.left && dragCenterPoint.y <= dropPoint.bottom && dragCenterPoint.x <= dropPoint.right);
    },
    _getDropPoint: function (item) {
      return {
        left: item[2],
        top: item[1],
        right: item[2] + item[4],
        bottom: item[1] + item[3],
      };
    },
    _getDragCenterPoint: function (pos) {
      let separatedElements = Element.parent.data.tempJSON[pos][5].split('@');
      if (separatedElements.length > 1) {
        return {
          x: parseInt(separatedElements[1]) + parseInt(Element.parent.data.tempJSON[pos][4]) / 2,
          y: parseInt(separatedElements[0]) + parseInt(Element.parent.data.tempJSON[pos][3]) / 2
        };
      }

      return false;
    },
    _isValid: function ($this, margins) {
      return ($this.position().top - Element.positionTop) < margins.marginBottom
        && ($this.position().top - Element.positionTop) > margins.negativeMarginBottom
        && ($this.position().left - Element.positionLeft) < margins.marginBottom
        && ($this.position().left - Element.positionLeft) > margins.negativeMarginBottom;
    },
    _setProperties: function ($this, $element) {
      Element.offsetTop = $this.position().top / Element.parent.data.zoom;
      Element.offsetLeft = $this.position().left / Element.parent.data.zoom;
      $element.css({
        'top': $this.position().top / Element.parent.data.zoom + 'px',
        'left': $this.position().left / Element.parent.data.zoom + 'px',
      })
    },
    _getElementsCount: function () {
      if (Element.parent.data.countElements !== null) {
        return Element.parent.data.countElements;
      }
      Element.parent.data.countElements = {};
      for (let h = 0; h < Element.parent.data.tempJSON.length; h++) {
        let subText = Worksheet.utility.prepareTextToSave(Element.parent.data.tempJSON[h][0]);
        subText = subText.split(" ").join("");
        subText = subText.toLowerCase();
        if (typeof Element.parent.data.countElements[subText] === 'undefined') {
          Element.parent.data.countElements[subText] = 0;
        }
        Element.parent.data.countElements[subText]++;
      }

      return Element.parent.data.countElements;
    },
    _getMargins: function ($element) {
      let marginBottom = 30,
        negativeMarginBottom = -30;
      if (parseInt($element.height(), 10) < 30 && parseInt($element.width(), 10) < 30) {
        marginBottom = 12;
        negativeMarginBottom = -12;
      } else if (parseInt($element.height(), 10) < 50 && parseInt($element.width(), 10) < 50) {
        marginBottom = 20;
        negativeMarginBottom = -20;
      }

      return {
        marginBottom: marginBottom,
        negativeMarginBottom: negativeMarginBottom
      }
    },
    _delay: async function (delayInms) {
      return new Promise(function (resolve) { setTimeout(resolve, delayInms)});
    }
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, drupalSettings, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, drupalSettings,Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Drop'),
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("drop:") == 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let $div = $('<div />', {
        'class': 'worksheet-drop-div',
        'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px;'
      });
      $('#worksheet-preview-elements', this.parent.context).append($div);
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, drupalSettings, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, drupalSettings, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Join'),
    parent: {},
    isStudent: false,
    positionLeft: 0,
    positionTop: 0,
    offsetLeft: 0,
    offsetTop: 0,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("join:") == 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let $div = $('<div />', {
        'class': 'worksheet-join-div',
        'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px;'
      }).data('pos', pos);

      if (!(Element.parent.settings.showRightAnswers && Element.parent.settings.showAnswers) && Worksheet.utility.isNotEmpty(Element.parent.data.tempJSON[pos][5])) {
        Element.parent.canvasHtml += Element.parent.data.tempJSON[pos][5].split('#').join('"');
      }

      if (Element.parent.settings.showRightAnswers && Element.parent.settings.showAnswers) {
        for (let h=0; h < Element.parent.data.tempJSON.length; h++){
          if(text === Worksheet.utility.prepareTextToSave(Element.parent.data.tempJSON[h][0]) && h !== pos) {
            Element.parent.canvasHtml += '<line x1="' + (Element.parent.data.tempJSON[pos][2] + (Element.parent.data.tempJSON[pos][4] / 2)) / Element.parent.data.zoom + '" y1="' + (Element.parent.data.tempJSON[pos][1] + (Element.parent.data.tempJSON[pos][3] / 2)) / Element.parent.data.zoom + '" x2="' + (Element.parent.data.tempJSON[h][2] + (Element.parent.data.tempJSON[h][4] / 2)) / Element.parent.data.zoom + '" y2="' + (Element.parent.data.tempJSON[h][1] + (Element.parent.data.tempJSON[h][3] / 2)) / Element.parent.data.zoom + '" stroke="darkblue" stroke-width="5"/>';
          }
        }
      } else if (Element.parent.settings.checkCorrectValues) {
        if (Worksheet.utility.isNotEmpty(Element.parent.data.tempJSON[pos][5])) {
          for (let r = 0; r < Element.parent.data.tempJSON.length; r++) {
            if (Element.parent.data.tempJSON[pos][5] === Element.parent.data.tempJSON[r][5] && r !== pos) {
              Element.parent.canvasHtml += Element.parent.data.tempJSON[pos][5].split('#').join('"');
              if (text === Worksheet.utility.processText(Element.parent.data.tempJSON[r][0]) && Element.parent.data.tempJSON[r][5].length) {
                $div.addClass('worksheet-join-right').removeClass('worksheet-join-error');
              } else {
                $div.addClass('worksheet-join-error').removeClass('worksheet-join-right');
              }
            }
          }
        } else {
          $div.addClass('worksheet-join-error').removeClass('worksheet-join-right');
        }
      } else {
        $div.addClass('worksheet-join-div-cursor');
        $div.on('mousedown', {pos: pos}, this._mouseDown);
        $div.on('touchstart', {pos: pos}, this._touchStart);
      }
      $('#worksheet-preview-elements', this.parent.context).append($div);
    },
    validation: function (item, pos, text) {
      Element.parent.data.answersTotal += 0.5;
      if (Worksheet.utility.isNotEmpty(Element.parent.data.tempJSON[pos][5])) {
        for (let r = 0; r < Element.parent.data.tempJSON.length; r++) {
          if (Element.parent.data.tempJSON[pos][5] === Element.parent.data.tempJSON[r][5] && r !== pos) {
            if (text === Worksheet.utility.processText(Element.parent.data.tempJSON[r][0])) {
              Element.parent.data.questionsTotal += 0.5;
              Element.parent.data.correctValues[pos] = "1";
            }
          }
        }
      }
    },
    _mouseDown: function (event) {
      event.preventDefault();
      if (!Element.parent.data.checkedAnswers) {
        event.data.$element = $(this);
        Element.parent.setStartTime();
        Element._commonMoveEvent(event);
        $(window).on('mousemove', event.data, Element._mouseMove).on('mouseup', event.data, Element._mouseUp);
      }
    },
    _touchStart: function (event) {
      event.preventDefault();
      if (!Element.parent.data.checkedAnswers) {
        event.data.$element = $(this);
        Element.parent.setStartTime();
        let touch = event.targetTouches[0];
        Element._commonMoveEvent(touch);
        $(window).on('touchmove', event.data, Element._touchMove).on('touchend', event.data, Element._touchUp);
      }
    },
    _mouseMove: function (event) {
      event.preventDefault();
      Element.parent.element.addClass('worksheet-pencil-arrow');
      Element._commonMoveEvent(event);
    },
    _touchMove: function (event) {
      event.preventDefault();
      let touch = event.targetTouches[0];
      Element._commonMoveEvent(touch);
    },
    _commonMoveEvent: function (event) {
      if (Element.positionLeft === 0) {
        Element.positionLeft = event.pageX - parseInt(Element.parent.element.offset().left);
      }
      if (Element.positionTop === 0) {
        Element.positionTop = event.pageY - parseInt(Element.parent.element.offset().top);
      }
      if (event.pageY < parseInt($(Element.parent.element).offset().top) + parseInt($(Element.parent.element).height()) * Element.parent.data.zoom) {
        Element.offsetLeft = (event.pageX - parseInt(Element.parent.element.offset().left));
        Element.offsetTop = (event.pageY - parseInt(Element.parent.element.offset().top));

        $('#worksheet-canvas svg', Element.parent.context).html('<line x1="' + Element.positionLeft / Element.parent.data.zoom + '" y1="' + Element.positionTop / Element.parent.data.zoom + '" x2="' + Element.offsetLeft / Element.parent.data.zoom + '" y2="' + Element.offsetTop / Element.parent.data.zoom + '" stroke="darkblue" stroke-width="5"/>');

        if (event.clientY >= (window.innerHeight - 40)) {
          document.body.scrollTop = (document.body.scrollTop + 5);
          document.documentElement.scrollTop = (document.documentElement.scrollTop + 5)
        }

        if (event.clientY <= 40) {
          document.body.scrollTop = (document.body.scrollTop - 5);
          document.documentElement.scrollTop = (document.documentElement.scrollTop - 5)
        }
      }
    },
    _mouseUp: function (event) {
      event.preventDefault();
      $(window).off('mousemove', Element._mouseMove).off('mouseup', Element._mouseUp);
      Element.parent.element.removeClass('worksheet-pencil-arrow');
      Element._commonUpEvent(event);
    },
    _touchUp: function (event) {
      $(window).off('touchmove', Element._touchMove).off('touchend', Element._touchUp);
      Element._commonUpEvent(event);
    },
    _commonUpEvent: function (event) {
      let pos = event.data.pos;

      $('#worksheet-canvas svg', Element.parent.context).html('');
      $('#worksheet-canvas2 svg', Element.parent.context).html('');
      $('.worksheet-join-div', Element.parent.context).each(function () {
        if ($(this).data('pos') !== pos) {
          let position = $(this).position();
          position.top = position.top / Element.parent.data.zoom;
          position.left = position.left / Element.parent.data.zoom;
          if (position.top < Element.offsetTop / Element.parent.data.zoom && (position.top + $(this).outerHeight()) > Element.offsetTop / Element.parent.data.zoom && position.left < Element.offsetLeft / Element.parent.data.zoom && (position.left + $(this).outerWidth()) > Element.offsetLeft / Element.parent.data.zoom) {
            let content = '<line x1="' + Element.positionLeft / Element.parent.data.zoom + '" y1="' + Element.positionTop / Element.parent.data.zoom+ '" x2="' + Element.offsetLeft / Element.parent.data.zoom + '" y2="' + Element.offsetTop / Element.parent.data.zoom+ '" stroke="darkblue" stroke-width="5"/>';
            Element.parent.data.text[pos] = String($(this).data('pos'));
            Element.parent.data.text[$(this).data('pos')] = String(pos);

            for (let k = 0; k < Element.parent.data.tempJSON.length; k++) {
              if ((Element.parent.data.text[k].length > 0 && parseInt(Element.parent.data.text[k]) == $(this).data('pos') || parseInt(Element.parent.data.text[k]) == pos)|| Element.parent.data.tempJSON[$(this).data('pos')][5] == Element.parent.data.tempJSON[k][5]) {
                let joinValue = Element.parent.data.tempJSON[k][5];
                for (let j = 0; j < Element.parent.data.tempJSON.length; j++) {
                  if (Element.parent.data.tempJSON[j][5].length && Element.parent.data.tempJSON[j][5] === joinValue) {
                    Element.parent.data.tempJSON[j][5] = "";
                  }
                }
                Element.parent.data.tempJSON[k][5] = "";
              }
            }
            Element.parent.data.tempJSON[$(this).data('pos')][5] = content.split('"').join('#');
            Element.parent.data.tempJSON[pos][5] = content.split('"').join('#');
            localStorage.setItem("worksheetContent", JSON.stringify(Element.parent.data.tempJSON));
          }
        }
      });
      $('#worksheet-canvas2 svg', Element.parent.context).html('');
      for (let s = 0; s < Element.parent.data.tempJSON.length; s++) {
        let text = Worksheet.utility.processText(Element.parent.data.tempJSON[s][0]);
        if (text.indexOf("join:") == 0 && Element.parent.data.tempJSON[s][5].length) {
          $('#worksheet-canvas2 svg', Element.parent.context).append(Element.parent.data.tempJSON[s][5].split('#').join('"'));
        }
      }
      $('#worksheet-canvas2 svg', Element.parent.context).html($('#worksheet-canvas2 svg', Element.parent.context).html());
      Element.positionLeft = 0;
      Element.positionTop = 0;
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, drupalSettings, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Link'),
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("link:") == 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let url = text.replace("link:", "");
      url = url.replace("LINK:", "");
      url = url.replace("Link:", "");
      url = url.trim();
      url = 'http://' + url;
      url = url.replace("http://http://", "http://");
      url = url.replace("http://https://", "https://");
      url = url.replace("http://HTTP://", "http://");
      url = url.replace("http://HTTPS://", "https://");

      let $div = $('<div />', {
        'class': 'worksheet-link-div',
        'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px'
      }).append($('<a />', {'href': url, 'target': '_blank'}));

      $('#worksheet-preview-elements', this.parent.context).append($div);
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Listening'),
    parent: {},
    isStudent: false,
    speechSynthesisEnabledBrowser: 'speechSynthesis' in window,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;

      if (!this.speechSynthesisEnabledBrowser && this.parent.data.originalJSON.indexOf("speak(") > -1) {
        alert(Drupal.t('This worksheet requires speech recognition, which is not supported by your web browser. We recommend to use Google Chrome to view this worksheet.'));
      }
    },
    check: function (text, originalText) {
      return text.indexOf("listen(") == 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let $content = $('<div />', {
        'class': 'worksheet-listen-div',
        'style': 'width:' + (parseInt(item[4]) - 15) + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px;',
        'title': Drupal.t('Click to listen'),
      });
      $content.on('click', {pos: pos}, this._readText)
      $('#worksheet-preview-elements', this.parent.context).append($content);
    },
    _readText: function (event) {
      event.preventDefault();
      let pos = event.data.pos;

      if (!Element.speechSynthesisEnabledBrowser) {
        alert(Drupal.t('This worksheet requires speech synthesis, which is not supported by your web browser. We recommend to use Chrome or Safari to view this worksheet.'));
      } else {
        let text = Worksheet.utility.replaceSpecialChars(Element.parent.data.originalJSON[pos][0]),
          language = text.substring(text.indexOf("(") + 1, text.indexOf("):")),
          textToRead = text.substring(text.indexOf("):") + 2),
          speechRate = 1;
        textToRead = textToRead.replace(/\(rate:.*?\)/, '');
        if (Element.parent.data.originalJSON[pos][0].replace(/\(rate:.*?\)/, '@@@@@').indexOf("@@@@@") > 0) {
          let rateList = Element.parent.data.originalJSON[pos][0].split("(rate:");
          if (typeof rateList[1] !== 'undefined') {
            let rate = rateList[1],
              separateRate = rate.split(")");
            if (typeof separateRate[0] !== 'undefined') {
              rate = separateRate[0].split(" ").join("");
              if (!isNaN(rate)) {
                speechRate = rate;
              }
            }
          }
        }

        let msg = new SpeechSynthesisUtterance();
        msg.text = textToRead;
        //msg.lang = language;
        msg.rate = speechRate;
        let voiceFound = 0,
          indexVoice,
          voices = speechSynthesis.getVoices();
        if (voices.length !== 0) {
          for (let i = 0; i < voices.length; i++) {
            if (voices[i].lang.replace("_", "-") === language && voiceFound === 0 && voices[i].name.indexOf('Anna') < 1) {
              indexVoice = i;
              voiceFound = 1;
            }
          }
        }
        if (voiceFound === 1) {
          msg.lang = voices[indexVoice].lang;
          msg.voice = voices[indexVoice];
          window.speechSynthesis.speak(msg);
        }
        Element.parent.setStartTime();
      }
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('PowerPoint'),
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return originalText.indexOf('https://onedrive.live.com/embed?') === 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let $content = $('<div />', {
        'class': 'worksheet-powerpoint-iframe',
        'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px',
      });
      $content.append($('<iframe />', {
        'width': item[4],
        'height': item[3],
        'src': this._htmlDecode(item[0]),
        'frameborder': '0'
      }));
      $('#worksheet-preview-elements', this.parent.context).append($content);
    },
    _htmlDecode: function (text) {
      let doc = new DOMParser().parseFromString(text, "text/html");
      return doc.documentElement.textContent;
    }
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, Drupal, drupalSettings) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Play MP3'),
    parent: {},
    isStudent: false,
    mouseMoveElement: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("playmp3:") == 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let mp3file = Worksheet.utility.getProperty(item[0]),
        $content;
      mp3file = mp3file.replace(/playmp3:/ig, "");
      mp3file = encodeURI(mp3file)
        .replace('(transparent)', '')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29')
        .replace(/!/g, '%21')
        .replace(/'/g, '%27');

      let $audio = $('#worksheet-medias source[src$="' + mp3file + '"]', this.parent.context).eq(0).parent();
      if (item[0].indexOf("(transparent)") > 0) {
        $content = $('<div />', {
          'class': 'worksheet-transparent-audioplayer',
          'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px;',
          'title': Drupal.t('Click to listen'),
        }).on('click', {audio: $audio.get(0)}, this._playTransparentPlay);
      } else {
        $content = $('<div />', {
          'class': 'worksheet-audioplayer',
          'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px;',
        });
        let $button = $('<button />', {'class': 'worksheet-play-button'}),
          $timeline = $('<div />', {'class': 'worksheet-timeline'}),
          $playhead = $('<div />', {'class': 'worksheet-playhead'});
        $button.on('click', {audio: $audio.get(0)}, this._clickPlay).appendTo($content);
        $timeline.on('click', {
          audio: $audio.get(0),
          $timeline: $timeline,
          $playhead: $playhead
        }, this._clickTimeline).appendTo($content);

        $playhead.on('mousedown', {
          pos: pos,
          $timeline: $timeline,
          $playhead: $playhead
        }, this._mouseDown).appendTo($timeline);

        $audio.on('loadstart', {
          $content: $content,
          $button: $button,
          $timeline: $timeline,
          $playhead: $playhead
        }, this._mp3Player).on('timeupdate', {
          audio: $audio.get(0),
          $content: $content,
          $button: $button,
          $timeline: $timeline,
          $playhead: $playhead,
          width: item[4],
          height: item[3]
        }, this._timeUpdate).attr('preload', 'auto').trigger('load');

      }
      $('#worksheet-preview-elements', this.parent.context).append($content);
    },
    _playTransparentPlay: function (event) {
      let audio = event.data.audio;
      if (audio.paused || audio.ended) {
        audio.play();
      } else {
        audio.pause();
      }
      Element.parent.setStartTime();
    },
    _clickPlay: function (event) {
      let audio = event.data.audio;
      if (audio.paused || audio.ended) {
        audio.play();
        $(this).addClass('worksheet-pause-button').removeClass('worksheet-play-button');
      } else {
        audio.pause();
        $(this).removeClass('worksheet-pause-button').addClass('worksheet-play-button');
      }
      Element.parent.setStartTime();
    },
    _movePlayhead: function (event) {
      if (Element.mouseMoveElement !== event.data.pos) {
        return;
      }
      let $timeline = event.data.$timeline,
        $playhead = event.data.$playhead,
        timelineWidth = $timeline.outerWidth() - $playhead.outerWidth(),
        newMargLeft = event.clientX - $timeline.offset().left;
      if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {
        $playhead.css('marginLeft', newMargLeft + 'px');
      }
      if (newMargLeft < 0) {
        $playhead.css('marginLeft', '0px');
      }
      if (newMargLeft > timelineWidth) {
        $playhead.css('marginLeft', timelineWidth + 'px');
      }
    },
    _mouseDown: function (event) {
      event.preventDefault();
      $(window).on('mousemove', event.data, Element._movePlayhead).on('mouseup', Element._mouseUp);
      Element.mouseMoveElement = event.data.pos;
    },
    _mouseUp: function (event) {
      event.preventDefault();
      $(window).off('mousemove', Element._movePlayhead).off('mouseup', Element._mouseUp);
      Element.mouseMoveElement = false;
    },
    _clickTimeline: function (event) {
      event.preventDefault();
      let audio = event.data.audio;
      audio.currentTime = audio.duration * Element._clickPercent(event);
    },
    _clickPercent: function (event) {
      let $timeline = event.data.$timeline,
        $playhead = event.data.$playhead;
      let timelineWidth = $timeline.outerWidth() - $playhead.outerWidth();
      return (event.clientX - $timeline.offset().left) / timelineWidth;
    },
    _mp3Player: function (event) {
      let $content = event.data.$content,
        $button = event.data.$button,
        $timeline = event.data.$timeline,
        $playhead = event.data.$playhead;

      if ($content.outerHeight() > 30) {
        $button.css({
          'height': '30px',
          'width': '30px',
          'marginTop': parseInt(($content.outerHeight() - 30) / 2) + 'px',
        });
        $timeline.css({
          'height': '15px',
          'marginTop': parseInt(($content.outerHeight() - 15) / 2) + 'px',
        });
        $playhead.css({
          'height': '15px',
          'width': '15px',
        });
      } else {
        $button.css({
          'height': '20px',
          'width': '20px',
          'marginTop': parseInt(($content.outerHeight() - 20) / 2) + 'px',
        });
        $timeline.css({
          'height': '10px',
          'marginTop': parseInt(($content.outerHeight() - 10) / 2) + 'px',
        });
        $playhead.css({
          'height': '10px',
          'width': '10px',
        });
      }
      $timeline.css('width', ($content.outerWidth() - $button.outerWidth() - 10) + 'px');
      if ($content.outerWidth() < 80) {
        $timeline.css('marginLeft', '80px');
      }
    },
    _timeUpdate: function (event) {
      let audio = event.data.audio,
        width = event.data.width,
        height = event.data.height,
        $content = event.data.$content,
        $button = event.data.$button,
        $timeline = event.data.$timeline,
        $playhead = event.data.$playhead;
      //    if (onplayhead == -1) {
      let timelineWidth = $timeline.outerWidth() - $playhead.outerWidth(),
        playPercent = timelineWidth * (audio.currentTime / audio.duration);
      $playhead.css('marginLeft', playPercent + 'px');
      if (audio.currentTime === audio.duration) {
        $button.removeClass('worksheet-pause-button').addClass('worksheet-play-button');
        $playhead.css('marginLeft', '0px');
        $content.css({
          'width': width + 'px',
          'height': height + 'px',
        });
      }
      // }
    }
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, Drupal, drupalSettings);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Simple Text'),
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("print:") == 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let style = Worksheet.utility.getStyles(item),
        $textbox = $('<div />', {
          class:
            'absolute text-center leading-none z-[4] bg-gray-505 text-[14px] text-blue-10 border border-gray-51 rounded-[4px] shadow-[0_0_8px] shadow-gray-60',
          spellcheck: 'false',
          autocomplete: 'false',
          style:
            'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px;' + style,
        }),
        printText = Worksheet.utility.replaceSpecialChars(text);
      $textbox.html(printText.replace('print:', ''));

      $('#worksheet-preview-elements', this.parent.context).append($textbox);
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, drupalSettings, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Open Answer'),
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("open-answer:") === 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let style = Worksheet.utility.getStyles(item),
        $textbox = $('<div />', {
          class:
            'absolute text-center leading-none z-[4] bg-gray-505 text-[14px] text-blue-10 border border-gray-51 rounded-[4px] shadow-[0_0_8px] shadow-gray-60',
          spellcheck: 'false',
          autocomplete: 'false',
          style:
            'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px;' + style,
        });
      $textbox.html(Worksheet.utility.replaceSpecialChars(Element.parent.data.tempJSON[pos][5]));

      let value = item[5];
      value = value.replace(/^\s*|\s*$/g,"");
      value = value.replace(/\s\s+/g, ' ').trim();
      if (Element.parent.settings.showRightAnswers && Element.parent.settings.showAnswers) {
        if (text === 'open-answer:required') {
          if (value.length > 0) {
            $textbox.addClass('rounded-[4px] shadow-[0_0_3px_0] shadow-gray-610 bg-green-120');
          } else {
            $textbox.addClass('!bg-red-900 !border-gray-605 rounded-[4px]');
          }
        }
      } else if (this.parent.settings.checkCorrectValues) {
        if (text === 'open-answer:required') {
          if (value.length > 0) {
            $textbox.addClass('rounded-[4px] shadow-[0_0_3px_0] shadow-gray-610 bg-green-120');
          } else {
            $textbox.addClass('!bg-red-900 !border-gray-605 rounded-[4px]');
          }
        } else if (value.length > 0) {
          $textbox.addClass('rounded-[4px] shadow-[0_0_3px_0] shadow-gray-610 bg-green-120');
        }
      } else {
        $textbox.attr('contenteditable', 'true');
        $textbox.on('blur', {pos: pos}, this._saveElement);
        $textbox.on('focus', Element.parent.setStartTime);
      }

      $('#worksheet-preview-elements', this.parent.context).append($textbox);
    },
    validation: function (item, pos, text) {
      if (text === 'open-answer:required') {
        Element.parent.data.answersTotal++;
        let value = Element.parent.data.tempJSON[pos][5];
        value = value.replace(/^\s*|\s*$/g,"");
        value = value.replace(/\s\s+/g, ' ').trim();
        if (value.length > 0) {
          Element.parent.data.questionsTotal++;
          Element.parent.data.correctValues[pos] = "1";
        }
      }
    },
    _saveElement: function (event) {
      let pos = event.data.pos;
      Element.parent.data.tempJSON[pos][5] = Worksheet.utility.prepareTextToSave($(this).text());
      localStorage.setItem("worksheetContent", JSON.stringify(Element.parent.data.tempJSON));
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, drupalSettings, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Select'),
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("select:") == 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let $content = '';
      if (item[5] === 'yes') {
        $content = $('<div />', {
          'class': 'worksheet-select-div worksheet-clickable-element worksheet-select-div-selected',
          'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px'
        });
        this.parent.data.clickedAnswer[pos] = "yes";
      } else {
        $content = $('<div />', {
          'class': 'worksheet-select-div worksheet-clickable-element',
          'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px'
        });
        this.parent.data.clickedAnswer[pos] = 0;
      }
      let isCorrect = item[5] === 'yes' && item[0] === 'select:yes',
        isWrong = item[5] === 'yes' && item[0] === 'select:no';
      if (Element.parent.settings.showRightAnswers && Element.parent.settings.showAnswers) {
        $content.removeClass('worksheet-clickable-element worksheet-select-div-selected');
        if (text === 'select:yes') {
          $content.addClass('rounded-[4px] shadow-[0_0_3px_0] shadow-gray-610 bg-green-120');
        }
      } else if (this.parent.settings.checkCorrectValues) {
        $content.removeClass('worksheet-clickable-element worksheet-select-div-selected');
        $content
          .toggleClass('rounded-[4px] shadow-[0_0_3px_0] shadow-gray-610 bg-green-120', isCorrect)
          .toggleClass('!bg-red-900 !border-gray-605 rounded-[4px]', isWrong);
        $content.off('click', this._clickSelectAnswer);
      } else {
        $content.on('click', { pos: pos }, this._clickSelectAnswer);
      }

      if (Element.parent.settings.showRightAnswers && Element.parent.settings.checkCorrectValues) {
        if (isCorrect) {
          Element.parent.createTooltip($content, Drupal.t('Correct answer.'), true);
        }
        if (isWrong) {
          Element.parent.createTooltip($content, Drupal.t('Wrong answer.'), true, [
            'before:bg-red-899',
            'after:border-red-899',
          ]);
        }
      }
      $('#worksheet-preview-elements', this.parent.context).append($content);
    },
    validation: function (item, pos, text) {
      if (item[0] === 'select:no' && Element.parent.data.clickedAnswer[pos] === 'yes') {
        Element.parent.data.selectClickCount++;
      } else if (item[0] === 'select:yes' && Element.parent.data.clickedAnswer[pos] === 'yes') {
        Element.parent.data.correctValues[pos] = "1";
        Element.parent.data.questionsTotal++;
        Element.parent.data.selectClickCount++;
      } else if (item[0] === 'select:' && Element.parent.data.clickedAnswer[pos] === 'yes') {
        Element.parent.data.correctValues[pos] = "1";
      }

      if (item[0] === 'select:yes') {
        Element.parent.data.answersTotal++;
        Element.parent.data.selectYesCount++;
      }
    },
    _clickSelectAnswer: function (event) {
      event.preventDefault();
      let pos = event.data.pos;
      if (!Element.parent.data.checkedAnswers) {
        if (Element.parent.data.clickedAnswer[pos] == "yes") {
          $(this).removeClass('worksheet-select-div-selected');
          Element.parent.data.clickedAnswer[pos] = "no";
          Element.parent.data.tempJSON[pos][5] = "no";
        } else {
          $(this).addClass('worksheet-select-div-selected');
          Element.parent.data.clickedAnswer[pos] = "yes";
          Element.parent.data.tempJSON[pos][5] = "yes";
        }
        localStorage.setItem("worksheetContent", JSON.stringify(Element.parent.data.tempJSON));
        Element.parent.setStartTime();
      }
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Speak'),
    parent: {},
    isStudent: false,
    speechRecognitionEnabledBrowser: 'webkitSpeechRecognition' in window,
    timer: null,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;

      if (this.parent.data.originalJSON.indexOf("speak(") > -1 && this.speechRecognitionEnabledBrowser == 0) {
        alert(Drupal.t('This worksheet requires speech recognition, which is not supported by your web browser. We recommend to use Google Chrome to view this worksheet.'));
      }
    },
    check: function (text, originalText) {
      return text.indexOf("speak(") == 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let language = "'" + text.substring(text.indexOf('(') + 1, text.indexOf('):')) + "'",
        style = Worksheet.utility.getStyles(item),
        $textbox = $('<div />', {
          class:
            'absolute text-center leading-none z-[4] bg-gray-505 text-[14px] text-blue-10 border border-gray-51 rounded-[4px] shadow-[0_0_8px] shadow-gray-60',
          style:
            'width:' +
            (parseInt(item[4]) - 15) +
            'px;height:' +
            item[3] +
            'px;top:' +
            item[1] +
            'px;left:' +
            item[2] +
            'px;' +
            style,
        }).append(Worksheet.utility.replaceSpecialChars(item[5]));

      $('#worksheet-preview-elements', this.parent.context).append($textbox);

      if (this.parent.settings.checkCorrectValues) {
        let textResponse = "/" + Worksheet.utility.processText(Element.parent.data.tempJSON[pos][5]) + "/";
        textResponse = Element._processText(textResponse);

        let values = text.substring(text.indexOf("):") + 2);
        let correctText = "/" + Worksheet.utility.processText(values) + "/";
        correctText = Element._processText(correctText);

        let possibleValues = values.split('$').join("'");
        possibleValues = possibleValues.split('#').join('"');
        if (Element.parent.settings.showRightAnswers && Element.parent.settings.showAnswers) {
          $textbox.html(possibleValues);
        } else if (correctText.indexOf(textResponse) === -1 && text.split(':')[1].length > 0) {
          $textbox.addClass('!bg-red-900');

          if (Element.parent.settings.showAnswers) {
            Element.parent.createTooltip($textbox, possibleValues.split('/'), true);
          }
        } else if (correctText.indexOf(textResponse) > -1 && text.split(':')[1].length > 0) {
          $textbox.addClass('!bg-green-120');
        }
      } else {

        let $microphone = $('<div />', {
          'class': 'worksheet-microphone-div',
          'style': 'top:' + (parseInt(item[1]) + (parseInt(item[3]) / 2) - 15) + 'px;left:' + (parseInt(item[2]) + parseInt(item[4]) - 30) + 'px;',
          'title': Drupal.t('Click and speak'),
        });
        $microphone.on('click', {
          pos: pos,
          language: language,
          text: text,
          $textbox: $textbox,
          $microphone: $microphone
        }, this._speechRecognition);
        $('#worksheet-preview-elements', this.parent.context).append($microphone);
      }
    },
    validation: function (item, pos, text) {
      if (text.split(":")[1].length > 0) {
        Element.parent.data.answersTotal++;
      }
      let textResponse = "/" + Worksheet.utility.processText(Element.parent.data.tempJSON[pos][5]) + "/";
      textResponse = Element._processText(textResponse);

      let values = text.substring(text.indexOf("):") + 2);
      let correctText = "/" + Worksheet.utility.processText(values) + "/";
      correctText = Element._processText(correctText);

      if (correctText.indexOf(textResponse) > -1 && text.split(":")[1].length > 0) {
        Element.parent.data.questionsTotal++;
        Element.parent.data.correctValues[pos] = "1"
      }
    },
    _saveSpeakBoxElement: function (pos, text) {
      Element.parent.data.tempJSON[pos][5] = Worksheet.utility.prepareTextToSave(text);
      localStorage.setItem("worksheetContent", JSON.stringify(Element.parent.data.tempJSON));
    },
    _processText: function (text) {
      text = text.toLowerCase();
      text = text.split(".").join("");
      text = text.split(",").join("");
      text = text.split(";").join("");
      text = text.split(":").join("");
      text = text.split("?").join("");
      text = text.split("¿").join("");
      text = text.split("!").join("");
      text = text.split("¡").join("");
      return text;
    },
    _speechRecognition: function (event) {
      let pos = event.data.pos,
        text = event.data.text,
        $microphone = event.data.$microphone,
        $textbox = event.data.$textbox,
        language = event.data.language;

      let $dialogElement = $('<div>'.concat(Drupal.theme('worksheetSpeakDialog'), "</div>")).appendTo('body');
      let dialog = Drupal.dialog($dialogElement, {
        dialogClass: 'worksheet-speak-dialog max-w-lg',
        width: '100%',
        title: Drupal.t('Please allow access to the microphone'),
        buttons: [{
          text: Drupal.t('Close'),
          click: function click() {
            $(this).dialog('close');
          }
        }],
      });
      dialog.showModal();

      if (Element.speechRecognitionEnabledBrowser === 0) {
        dialog.close();
        alert(Drupal.t('This worksheet requires speech recognition, which is not supported by your web browser. We recommend to use Google Chrome to view this worksheet.'));
      } else if (!Element.parent.data.checkedAnswers) {
        let recognition = new webkitSpeechRecognition();
        recognition.lang = language.toString();
        recognition.onstart = function () {
          dialog.close();
          Element.timer = setInterval(Element._blinkingMicrophone, 500, $microphone);
        }

        recognition.onend = function () {
          clearInterval(Element.timer);
          $microphone.removeClass('worksheet-speak-microphone-hide');
        }
        recognition.onresult = function (event) {
          if (event.results.length > 0) {
            $textbox.text(event.results[0][0].transcript);
            for (let j = 0; j < event.results[0].length; j++) {
              let textResponse = "/" + Worksheet.utility.processText(event.results[0][j].transcript) + "/";
              textResponse = Element._processText(textResponse);

              let processedText = Worksheet.utility.processText(text),
                correctText = processedText.substring(processedText.indexOf("):") + 2),
                correctProcessedText = "/" + Worksheet.utility.processText(correctText) + "/";

              correctProcessedText = Element._processText(correctProcessedText);
              if (correctProcessedText.indexOf(textResponse) > -1 && processedText.split(":")[1].length > 0) {
                $textbox.text(event.results[0][j].transcript);
              }
            }

            Element._saveSpeakBoxElement(pos, $textbox.text());
          } else {
            alert(Drupal.t('No word was recognized. Please click on the microphone and speak.'));
          }
        }

        recognition.start();
        Element.parent.setStartTime();
      }
    },
    _blinkingMicrophone: function ($microphone) {
      $microphone.toggleClass('worksheet-speak-microphone-hide');
    },
  };

  Worksheet.elements.push(Element);

  Drupal.theme.worksheetSpeakDialog = function () {
    return "<p>".concat(Drupal.t('Look at the top of your web browser. If you see a message asking for permission to access the microphone, please allow.'), "</p>");
  };

})(jQuery, window.Worksheet, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, drupalSettings, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Textfield'),
    weight: -100,
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return true;
    },
    renderPreviewElement: function (item, pos, text) {
      let style = Worksheet.utility.getStyles(item),
        $textbox = $('<div />', {
          class:
            'absolute text-center leading-none z-[4] bg-gray-505 text-[14px] text-blue-10 border border-gray-51 rounded-[4px] shadow-[0_0_8px] shadow-gray-60',
          spellcheck: 'false',
          autocomplete: 'false',
          style:
            'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px;' + style,
        });
      $textbox.html(Worksheet.utility.replaceSpecialChars(Element.parent.data.tempJSON[pos][5]));

      if (this.parent.settings.checkCorrectValues) {
        if (Element.parent.data.originalJSON[pos][0].length > 0) {
          Element.parent.data.answersTotal++;
          let value = Element.parent.data.tempJSON[pos][5];
          let correctValue = Element.parent.data.originalJSON[pos][0];
          value = "" + value;
          if (Element.parent.settings.ignoreCapitalLetters) {
            value = value.toLowerCase();
            correctValue = correctValue.toLowerCase();
          }
          if (Element.parent.settings.ignoreSigns) {
            value = Worksheet.utility.removeSigns(value);
            correctValue = Worksheet.utility.removeSigns(correctValue);
          }
          if (Element.parent.settings.ignoreAccents) {
            value = Worksheet.utility.removeAccents(value);
            correctValue = Worksheet.utility.removeAccents(correctValue);
          }
          value = "/" + Worksheet.utility.processText(value) + "/";
          correctValue = "/" + Worksheet.utility.processText(correctValue) + "/";

          let possibleValues = Element.parent.data.originalJSON[pos][0].split("$").join("'");
          possibleValues = possibleValues.split("#").join('"');

          if (Element.parent.settings.showAnswers) {
            $textbox.html(possibleValues);
          } else if (correctValue.indexOf(value) === -1) {
            $textbox.addClass('!bg-red-900');

            if (Element.parent.settings.showRightAnswers) {
              const tooltipValues = possibleValues
                .split('/')
                .map((value) => value)

              Element.parent.createTooltip($textbox, tooltipValues, true);
            }
          } else if (correctValue.indexOf(value) > -1) {
            $textbox.addClass('!bg-green-120');
          }
        }
      } else {
        $textbox.attr('contenteditable', 'true');
        $textbox.on('blur', {pos: pos}, this._saveElement);
        $textbox.on('focus', Element.parent.setStartTime);
      }

      $('#worksheet-preview-elements', this.parent.context).append($textbox);
    },
    validation: function (item, pos, text) {
      if (Element.parent.data.originalJSON[pos][0].length > 0) {
        Element.parent.data.answersTotal++;
        let value = Element.parent.data.tempJSON[pos][5];
        let correctValue = Element.parent.data.originalJSON[pos][0];
        value = "" + value;
        if (Element.parent.settings.ignoreCapitalLetters) {
          value = value.toLowerCase();
          correctValue = correctValue.toLowerCase();
        }
        if (Element.parent.settings.ignoreSigns) {
          value = Worksheet.utility.removeSigns(value);
          correctValue = Worksheet.utility.removeSigns(correctValue);
        }
        if (Element.parent.settings.ignoreAccents) {
          value = Worksheet.utility.removeAccents(value);
          correctValue = Worksheet.utility.removeAccents(correctValue);
        }
        value = "/" + Worksheet.utility.processText(value) + "/";
        correctValue = "/" + Worksheet.utility.processText(correctValue) + "/";

        if (correctValue.indexOf(value) > -1) {
          Element.parent.data.questionsTotal++;
          Element.parent.data.correctValues[pos] = "1";
        }
      }
    },
    _saveElement: function (event) {
      let pos = event.data.pos;
      Element.parent.data.tempJSON[pos][5] = Worksheet.utility.prepareTextToSave($(this).text());
      localStorage.setItem("worksheetContent", JSON.stringify(Element.parent.data.tempJSON));
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, drupalSettings, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Checkboxes'),
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("tick:") == 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let $content,
        value = Number(item[4]);
      if (Number(item[3]) < value) {
        value = Number(item[3]);
      }
      value = Math.floor(value / 4) * 4;
      if (item[5] === 'yes') {
        $content = $('<div />', {
          'class': 'worksheet-tickbox worksheet-clickable-element worksheet-tickbox-div-selected',
          'style': 'width:' + value + 'px;height:' + value + 'px;font-size:' + value + 'px;line-height:' + value + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px'
        });
        $content.html('&#x2713;');
        this.parent.data.clickedAnswer[pos] = "yes";
      } else {
        $content = $('<div />', {
          'class': 'worksheet-tickbox worksheet-clickable-element',
          'style': 'width:' + value + 'px;height:' + value + 'px;font-size:' + value + 'px;line-height:' + value + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px'
        });
        this.parent.data.clickedAnswer[pos] = "no";
      }

      if (Element.parent.settings.showRightAnswers && Element.parent.settings.showAnswers) {
        $content.removeClass('worksheet-clickable-element worksheet-tickbox-div-selected');
        if (text === 'tick:yes') {
          $content.addClass('worksheet-tickbox-correct');
          $content.html('&#x2713;');
        }
      } else if (this.parent.settings.checkCorrectValues) {
        if (Element.parent.data.correctValues[pos] !== "0") {
          $content.html('&#x2713;');
        }
        $content.removeClass('worksheet-clickable-element');
        let tooltipText;
        if (item[0] === 'tick:no' && item[5] === 'yes') {
          $content.toggleClass('worksheet-tickbox-wrong', Element.parent.data.correctValues[pos] !== '1');

          if (Element.parent.settings.showRightAnswers) {
            tooltipText = Drupal.t('Wrong answer.');
            Element.parent.createTooltip($content, tooltipText, true, ['before:bg-red-899', 'after:border-red-899']);
          }
        } else if (item[0] === 'tick:yes' && item[5] === 'yes') {
          $content.toggleClass('worksheet-tickbox-correct', Element.parent.data.correctValues[pos] === '1');

          if (Element.parent.settings.showRightAnswers) {
            tooltipText = Drupal.t('Correct answer.');
            Element.parent.createTooltip($content, tooltipText, true);
          }
        }
        $content.off('click', this._clickTickAnswer);

      } else {
        $content.on('click', {pos: pos}, this._clickTickAnswer);
      }
      $('#worksheet-preview-elements', this.parent.context).append($content);
    },
    validation: function (item, pos, text) {
      if (item[0] === 'tick:no' && item[5] === 'yes') {
        Element.parent.data.selectClickCount++;
      } else if (item[0] === 'tick:yes' && item[5] === 'yes') {
        Element.parent.data.correctValues[pos] = "1";
        Element.parent.data.questionsTotal++;
        Element.parent.data.selectClickCount++;
      }
      if (item[0] === 'tick:yes') {
        Element.parent.data.answersTotal++;
        Element.parent.data.selectYesCount++;
      }
    },
    _clickTickAnswer: function (event) {
      event.preventDefault();
      let pos = event.data.pos;
      if (!Element.parent.data.checkedAnswers) {
        if (Element.parent.data.clickedAnswer[pos] === "yes") {
          $(this).html('');
          Element.parent.data.clickedAnswer[pos] = "no";
          Element.parent.data.tempJSON[pos][5] = "no";
        } else {
          $(this).html('&#x2713;');
          Element.parent.data.clickedAnswer[pos] = "yes";
          Element.parent.data.tempJSON[pos][5] = "yes";
        }
        localStorage.setItem("worksheetContent", JSON.stringify(Element.parent.data.tempJSON));
        Element.parent.setStartTime();
      }
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, drupalSettings, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Value'),
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("value:") == 0;
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, drupalSettings, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Word search'),
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return text.indexOf("wordsearch(") == 0;
    },
    renderPreviewElement: function (item, pos, text) {
      let splitValues = text.split(":");
      let rowsAndColumns = splitValues[1];
      if (this.parent.data.tempJSON[pos][5].length < rowsAndColumns.length) {
        this.parent.data.tempJSON[pos][5] = rowsAndColumns.split("v").join("x");
      }
      let separateNumberOfColumns = splitValues[0].split("x");
      let numberOfColumns = Number(separateNumberOfColumns[1].replace(")", ""));
      let column = 0;
      let $htmlTable = $('<table />', {'class': 'worksheet-wordsearch-table'}), $row;
      for (let k = 0; k < rowsAndColumns.length; k++) {
        if (column === 0) {
          $row = $('<tr>');
          $htmlTable.append($row);
        }
        let $td = $('<td />');

        if (Element.parent.settings.showRightAnswers && Element.parent.settings.showAnswers) {
          if (rowsAndColumns.charAt(k) === 'v') {
            $td.addClass('worksheet-wordsearch-right-td');
          }
        } else if (!this.parent.settings.checkCorrectValues) {
          if (this.parent.data.tempJSON[pos][5].charAt(k) === "v") {
            $td.addClass('worksheet-wordsearch-clicked-td');
          } else {
            $td.addClass('worksheet-wordsearch-td');
          }
          $td.addClass('worksheet-clickable-element').on('click', {
            column: pos,
            row: k
          }, this._clickWordSearchTd);
        } else {
          if (Element.parent.data.tempJSON[pos][5].charAt(k) === "v") {
            if (rowsAndColumns.charAt(k) === Element.parent.data.tempJSON[pos][5].charAt(k)) {
              $td.addClass('worksheet-wordsearch-right-td');
            } else {
              $td.addClass('worksheet-wordsearch-error-td');
            }
          }
        }

        $row.append($td);

        if (++column === numberOfColumns) {
          column = 0;
        }

      }
      let content = $('<div />', {
        'class': 'worksheet-wordsearch-div',
        'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px'
      }).append($htmlTable);
      $('#worksheet-preview-elements', this.parent.context).append(content);
    },
    validation: function (item, pos, text) {
      let chars = "";
      let correctCount = 0;
      let correctLetters = 0;
      let textSpilt = text.split(":");
      let letters = textSpilt[1];
      for (let p = 0; p < letters.length; p++) {
        if (letters.charAt(p) === "v") {
          correctCount += 1;
          if (Element.parent.data.tempJSON[pos][5].charAt(p) === "v") {
            correctLetters += 1;
            chars += "v";
          } else {
            chars += "x";
          }
        } else {
          if (Element.parent.data.tempJSON[pos][5].charAt(p) === "v") {
            correctLetters -= 0.2;
          }
          chars += "x";
        }
      }
      if (correctLetters < 0) {
        correctLetters = 0;
      }
      Element.parent.data.answersTotal += correctCount / 5;
      Element.parent.data.questionsTotal += correctLetters / 5;
      Element.parent.data.correctValues[pos] = chars;
    },
    _clickWordSearchTd: function (event) {
      event.preventDefault();
      let column = event.data.column,
        row = event.data.row;
      if (Element.parent.data.tempJSON[column][5].charAt(row) === "v") {
        Element.parent.data.tempJSON[column][5] = Element.parent.data.tempJSON[column][5].substring(0, row) + "x" + Element.parent.data.tempJSON[column][5].substring(row + 1);
        $(this).addClass('worksheet-wordsearch-td').removeClass('worksheet-wordsearch-clicked-td');
      } else {
        Element.parent.data.tempJSON[column][5] = Element.parent.data.tempJSON[column][5].substring(0, row) + "v" + Element.parent.data.tempJSON[column][5].substring(row + 1);
        $(this).addClass('worksheet-wordsearch-clicked-td').removeClass('worksheet-wordsearch-td');
      }
      Element.parent.setStartTime();
    },
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Worksheet, Drupal) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];

  let Element = {
    name: Drupal.t('Youtube'),
    parent: {},
    isStudent: false,
    init: function (parent, isStudent = false) {
      this.parent = parent;
      this.isStudent = isStudent;
    },
    check: function (text, originalText) {
      return Worksheet.utility.getYouTubeUrl(originalText, true) !== null;
    },
    renderPreviewElement: function (item, pos, text) {
      let $content = $('<div />', {
        'class': 'worksheet-iframe',
        'style': 'width:' + item[4] + 'px;height:' + item[3] + 'px;top:' + item[1] + 'px;left:' + item[2] + 'px',
      }),
        yt = Worksheet.utility.getYouTubeUrl(item[0], true);
      if (Cookies.get('youtube_cookies_accepted') === 'no') {
        $content.append($('<iframe />', {
          'width': item[4],
          'height': item[3],
          'src': '',
          'frameborder': '0'
        }));
      } else {
        $content.append($('<iframe />', {
          'width': item[4],
          'height': item[3],
          'src': 'https://www.youtube-nocookie.com/embed/' + yt.id + '?rel=0&amp;showinfo=0&amp;cc_load_policy=3&start=' + yt.offset,
          'frameborder': '0'
        }));
      }
      if (item[4] > 320) {
        $('<div />', {
          'class': 'worksheet-iframe-bottom',
          'style': 'width:' + item[4] + 'px',
        }).appendTo($content);
      }
      if (item[3] > 220) {
        $('<div />', {
          'class': 'worksheet-iframe-top',
          'style': 'width:' + item[4] + 'px',
        }).appendTo($content);
      }
      $('#worksheet-preview-elements', this.parent.context).append($content);
    }
  };

  Worksheet.elements.push(Element);

})(jQuery, window.Worksheet, Drupal);
;
/**
 * @file
 * Custom JS for worksheet preview.
 */
window.Worksheet = window.Worksheet || {};

(function ($, Drupal, Worksheet, drupalSettings) {
  'use strict';

  Worksheet.elements = Worksheet.elements || [];
  drupalSettings.worksheet = drupalSettings.worksheet || {};
  let query = $.extend(true, {}, drupalSettings.path.currentQuery);
  let WorksheetPreview = {
    initialization: false,
    element: false,
    context: false,
    canvasHtml: '',
    data: {
      originalJSON: [],
      tempJSON: [],
      notes: [],
      text: [],
      clickedAnswer: [],
      checkedAnswers: false, // It changes the value after clicking the
      // "Finish" button.
      correctValues: [],
      zoom: 1,
      isFinished: false,
      isFilled: false,
      questionsTotal: 0,
      answersTotal: 0,
      selectYesCount: 0,
      selectClickCount: 0,
      page: 0,
      theValue: 0,
      totalValue: 0,
      timesSolved: 0,
      worksheetId: '',
      questionsWorksheetTotal: 0,
      answersWorksheetTotal: 0,
      rate: '',
      startTime: 0,
      savedData: [],
      currentResponseIndex: -1,
      hasTeacherCanvas: false,
      currentResponse: [],
      maxScore: 10,
      min: 0,
      timer: 0,
    },
    height: '100%',
    isStudent: drupalSettings.user.isStudent,
    isTeacher: drupalSettings.user.isTeacher,
    settings: {
      ignoreCapitalLetters: true,
      ignoreSigns: false,
      ignoreAccents: false,
      checkCorrectValues: false,
      showAnswers: false,
      allowRepetition: 0,
      showRightAnswers: true,
      gradingOptions: '',
      rateType: '',
      notification: null,
    },
    methods: {
      init: function (options) {
        if (!WorksheetPreview.initialization) {
          WorksheetPreview.initialization = true;
          WorksheetPreview.element = $(this);
          WorksheetPreview.context = options.context || document;
          WorksheetPreview.parentSettings = options.settings || {};
          if (typeof options.json !== 'undefined') {
            WorksheetPreview.data.originalJSON = options.json;
            WorksheetPreview.data.tempJSON = options.json;
          } else if (
            typeof options.settings.worksheet !== 'undefined' &&
            typeof options.settings.worksheet.json !== 'undefined'
          ) {
            WorksheetPreview.data.originalJSON = JSON.parse(options.settings.worksheet.json);
            WorksheetPreview.data.tempJSON = JSON.parse(options.settings.worksheet.json);
          } else {
            WorksheetPreview.data.originalJSON = [];
            WorksheetPreview.data.tempJSON = [];
          }
          (WorksheetPreview.height =
            typeof WorksheetPreview.parentSettings.worksheet.height !== 'undefined' &&
            WorksheetPreview.parentSettings.worksheet.height > 0
              ? WorksheetPreview.parentSettings.worksheet.height
              : '100%'),
            Worksheet.elements.sort(Worksheet.utility.sortByWeightElement);

          for (let obj of Worksheet.elements) {
            obj.init(WorksheetPreview, WorksheetPreview.isStudent);
          }
          switch (query.m) {
            case 'd':
              WorksheetPreview.settings.gradingOptions = 'decimals';
              break;
            case 'n':
              WorksheetPreview.settings.gradingOptions = 'no';
              break;
          }

          if (query.is === 'y') {
            WorksheetPreview.settings.ignoreSigns = true;
          }
          if (query.im === 'n') {
            WorksheetPreview.settings.ignoreCapitalLetters = false;
          }
          if (query.ia === 'y') {
            WorksheetPreview.settings.ignoreAccents = true;
          }
          if (query.sr === 'y') {
            WorksheetPreview.settings.showRightAnswers = true;
          }
          if (query.no) {
            WorksheetPreview.settings.notification = query.no;
          }
          if (
            typeof query.mn != 'undefined' &&
            typeof drupalSettings.worksheet.minutes !== 'undefined' &&
            drupalSettings.worksheet.minutes > 0
          ) {
            WorksheetPreview.initTimer(drupalSettings.worksheet.minutes);
            $(window)
              .on('resize', function () {
                $('#worksheet-timer', WorksheetPreview.context).css(
                  'left',
                  $('#worksheet-medias', WorksheetPreview.context).offset().left,
                );
              })
              .trigger('resize');
          }
          if (
            typeof drupalSettings.worksheet.max_score !== 'undefined' &&
            parseInt(drupalSettings.worksheet.max_score) > 0
          ) {
            WorksheetPreview.data.maxScore = parseInt(drupalSettings.worksheet.max_score);
          }

          if (
            typeof options.settings.worksheet !== 'undefined' &&
            typeof options.settings.worksheet.worksheet_settings !== 'undefined'
          ) {
            WorksheetPreview.methods.setSettings(WorksheetPreview.parentSettings.worksheet.worksheet_settings);
          }

          if (WorksheetPreview.data.originalJSON.length) {
            WorksheetPreview.renderWorksheet();

            for (let j = 0; j < WorksheetPreview.data.originalJSON.length; j++) {
              WorksheetPreview.data.clickedAnswer[j] = '0';
              WorksheetPreview.data.correctValues[j] = '0';
            }
          }

          if (
            typeof options.settings.worksheet.preview !== 'undefined' &&
            options.settings.worksheet.preview === 'answer'
          ) {
            WorksheetPreview.methods.validation({ clicked: true, showErrors: true });
          }
        }
      },
      render: function (page, worksheetId, json, savedData, notes) {
        WorksheetPreview.initWorksheet(page, worksheetId, json, savedData, notes);
        WorksheetPreview.renderWorksheet();
      },
      setSettings: function (settings) {
        $.extend(true, WorksheetPreview.settings, settings);
      },
      saveForLater: function () {
        WorksheetPreview.saveAnswers(true);
      },
      getPnt: function () {
        return WorksheetPreview.data.questionsWorksheetTotal;
      },
      getMaxScore: function () {
        return WorksheetPreview.data.maxScore;
      },
      getIgnoreCapitalLetters: function () {
        return WorksheetPreview.settings.ignoreCapitalLetters;
      },
      getIgnoreSigns: function () {
        return WorksheetPreview.settings.ignoreSigns;
      },
      getIgnoreAccents: function () {
        return WorksheetPreview.settings.ignoreAccents;
      },
      getJson: function () {
        return JSON.stringify(WorksheetPreview.data.tempJSON);
      },
      getNotification: function () {
        return WorksheetPreview.settings.notification;
      },
      getTotalTime: function () {
        let totalTime = 0;
        if (WorksheetPreview.data.startTime > 0) {
          totalTime = Math.floor(Date.now() / 1000) - WorksheetPreview.data.startTime;
        }

        return totalTime;
      },
	
      // show the right answers or not / the correct answers
	  
	  validation: function (settings) {
        let defaultSettings = {
          clicked: false,
          showErrors: true,
          page: undefined,
          worksheetId: undefined,
          json: undefined,
          savedData: undefined,
          rate: undefined,
          showCustomRate: false,
          showAnswers: false,
          showRightAnswers: true,
        };

        settings = $.extend(true, {}, defaultSettings, settings);

        WorksheetPreview.settings.checkCorrectValues = settings.showErrors;
        WorksheetPreview.settings.showAnswers = settings.showAnswers;
        WorksheetPreview.data.totalValue = 0;
        WorksheetPreview.data.questionsWorksheetTotal = 0;
        WorksheetPreview.data.answersWorksheetTotal = 0;
        WorksheetPreview.data.rate = settings.rate;
        WorksheetPreview.data.dropElements = ',';
        WorksheetPreview.data.countElements = null;
        if (typeof settings.savedData !== 'undefined') {
          WorksheetPreview.data.savedData = settings.savedData;
        }
        if (typeof settings.page !== 'undefined') {
          WorksheetPreview.data.page = settings.page;
        }
        if (typeof settings.showRightAnswers !== 'undefined') {
          WorksheetPreview.settings.showRightAnswers = settings.showRightAnswers;
        }

        let json = settings.json;
        if (!WorksheetPreview.data.tempJSON.length && typeof json !== 'undefined' && json) {
          if (Array.isArray(json) && json.length) {
            WorksheetPreview.data.originalJSON = json;
            WorksheetPreview.data.tempJSON = json;
          } else if (!Array.isArray(json) && Object.keys(json).length) {
            WorksheetPreview.data.originalJSON = Object.entries(json);
            WorksheetPreview.data.tempJSON = Object.entries(json);
          }
        }
        json = WorksheetPreview.data.tempJSON;

        for (let q = 0; q < json.length + 1; q++) {
          let hasValueBox = false;
          let container = {};
          if (q < json.length) {
            let text = Worksheet.utility.processText(json[q][0]);
            if (text.toLowerCase().indexOf('value:') === 0) {
              let maxPointsString = text.toLowerCase().replace('value:', '');
              maxPointsString = maxPointsString.split(' ').join('');
              maxPointsString = maxPointsString.split(',').join('.');

              if (!isNaN(maxPointsString)) {
                WorksheetPreview.data.theValue = Number(maxPointsString);
                WorksheetPreview.data.totalValue += WorksheetPreview.data.theValue;
                container = {
                  minTop: Number(json[q][1]),
                  maxTop: Number(json[q][1]) + Number(json[q][3]),
                  minLeft: Number(json[q][2]),
                  maxLeft: Number(json[q][2]) + Number(json[q][4]),
                };
                hasValueBox = true;
              }
            }
          } else {
            if (WorksheetPreview.data.totalValue > WorksheetPreview.data.maxScore) {
              WorksheetPreview.data.theValue = 0;
            } else {
              WorksheetPreview.data.theValue = WorksheetPreview.data.maxScore - WorksheetPreview.data.totalValue;
              WorksheetPreview.data.totalValue = WorksheetPreview.data.maxScore;
            }
            container = {
              minTop: 0,
              maxTop: 1000000000,
              minLeft: 0,
              maxLeft: 1000000000,
            };
            hasValueBox = true;
          }

          if (hasValueBox) {
            WorksheetPreview.data.questionsTotal = 0;
            WorksheetPreview.data.answersTotal = 0;
            WorksheetPreview.data.selectYesCount = 0;
            WorksheetPreview.data.selectClickCount = 0;

            for (let j = 0; j < json.length; j++) {
              if (typeof json[j][0] === 'undefined') {
                continue;
              }
              let text = Worksheet.utility.processText(Worksheet.utility.getProperty(json[j][0]));
              for (let obj of Worksheet.elements) {
                if (obj.check(text, json[j][0]) && WorksheetPreview._containElement(json[j], container)) {
                  if (typeof obj.validation !== 'undefined') {
                    obj.validation(json[j], j, text);
                  }
                  break;
                }
              }
            }

            let fixedSelectCounter = WorksheetPreview.data.selectClickCount - WorksheetPreview.data.selectYesCount;
            if (fixedSelectCounter > WorksheetPreview.data.selectYesCount) {
              fixedSelectCounter = WorksheetPreview.data.selectYesCount;
            }
            if (fixedSelectCounter > 0) {
              WorksheetPreview.data.questionsTotal = WorksheetPreview.data.questionsTotal - fixedSelectCounter;
            }

            if (WorksheetPreview.data.answersTotal > 0) {
              let pnt =
                (WorksheetPreview.data.questionsTotal * WorksheetPreview.data.theValue) /
                WorksheetPreview.data.answersTotal;
              pnt = Math.round(pnt * 10) / 10;
              if (pnt < 0) {
                pnt = 0;
              }
              if (pnt > WorksheetPreview.data.theValue) {
                pnt = WorksheetPreview.data.theValue;
              }
              WorksheetPreview.data.questionsWorksheetTotal += pnt;
              WorksheetPreview.data.answersWorksheetTotal += WorksheetPreview.data.theValue;
            }
          }
        }
        if (!settings.showErrors) {
          WorksheetPreview.renderGrade(settings.clicked, settings.showCustomRate);
          return;
        }

        WorksheetPreview.setStatus(settings.worksheetId);
        WorksheetPreview.renderWorksheet();
        WorksheetPreview.renderGrade(settings.clicked, settings.showCustomRate);
      },
      zoom: function (zoom) {
        WorksheetPreview.data.zoom = zoom;
      },
      destroy: function () {
        WorksheetPreview.initialization = false;
        WorksheetPreview.data.originalJSON = [];
        WorksheetPreview.data.tempJSON = [];
        WorksheetPreview.isStudent = true;
        WorksheetPreview.element.removeOnce('worksheet-preview');

        for (let obj of Worksheet.elements) {
          if (typeof obj.destroy === 'function') {
            obj.destroy(WorksheetPreview);
          }
        }
      },
    },
    _containElement: function (element, container) {
      let boxMinTop = Number(element[1]);
      let boxMaxTop = Number(element[1]) + Number(element[3]);
      let boxMinLeft = Number(element[2]);
      let boxMaxLeft = Number(element[2]) + Number(element[4]);

      return (
        boxMinTop >= container.minTop &&
        boxMaxTop <= container.maxTop &&
        boxMinLeft >= container.minLeft &&
        boxMaxLeft <= container.maxLeft
      );
    },
    initWorksheet: function (page, worksheetId, json, savedData, notes, hasTeacherCanvas) {
      WorksheetPreview.data.originalJSON = json;
      WorksheetPreview.data.tempJSON = json;
      WorksheetPreview.data.page = page;
      WorksheetPreview.data.savedData = savedData;
      WorksheetPreview.data.worksheetId = worksheetId;
      WorksheetPreview.settings.checkCorrectValues = false;
      WorksheetPreview.data.timesSolved = 0;
      WorksheetPreview.data.startTime = 0;
      WorksheetPreview.data.currentResponse = [];
      WorksheetPreview.data.currentResponseIndex = -1;
      WorksheetPreview.data.isFinished = false;
      WorksheetPreview.data.isFilled = false;
      WorksheetPreview.data.hasTeacherCanvas = hasTeacherCanvas;
      WorksheetPreview.data.notes = notes;
      WorksheetPreview.setStatus(worksheetId);

      for (let j = 0; j < notes.length; j++) {
        if (notes[j][0] === worksheetId) {
          WorksheetPreview.data.timesSolved++;
        }
      }

      if (
        !WorksheetPreview.settings.repeating &&
        (WorksheetPreview.data.isFilled || WorksheetPreview.data.isFinished)
      ) {
        for (let j = 0; j < WorksheetPreview.data.currentResponse[1].length; j++) {
          if (typeof WorksheetPreview.data.tempJSON[j] !== 'undefined') {
            WorksheetPreview.data.tempJSON[j][5] = WorksheetPreview.data.currentResponse[1][j];
            WorksheetPreview.data.correctValues[j] = '0';
          }
        }
      } else if (WorksheetPreview.settings.repeating) {
        if (WorksheetPreview.settings.repeatOnlyErrors) {
          for (let j = 0; j < WorksheetPreview.data.tempJSON.length; j++) {
            if (WorksheetPreview.data.correctValues[j] === '0') {
              WorksheetPreview.data.tempJSON[j][5] = '';
            } else if (WorksheetPreview.data.correctValues[j] === '1') {
            } else {
              WorksheetPreview.data.tempJSON[j][5] = WorksheetPreview.data.correctValues[j];
            }
          }
        } else {
          for (let j = 0; j < WorksheetPreview.data.tempJSON.length; j++) {
            WorksheetPreview.data.tempJSON[j][5] = '';
          }
        }
      } else {
        for (let j = 0; j < WorksheetPreview.data.tempJSON.length; j++) {
          if (typeof WorksheetPreview.data.tempJSON[j] !== 'undefined') {
            WorksheetPreview.data.correctValues[j] = '0';
          }
        }
      }
    },

    setStatus: function (worksheetId) {
      WorksheetPreview.data.isFilled = false;
      WorksheetPreview.data.isFinished = false;
      WorksheetPreview.settings.currentResponse = [];
      WorksheetPreview.data.currentResponseIndex = -1;
      if (typeof worksheetId === 'undefined') {
        return;
      }
      for (let j = 0; j < WorksheetPreview.data.savedData.length; j++) {
        if (WorksheetPreview.data.savedData[j][0] === worksheetId) {
          WorksheetPreview.data.currentResponse = WorksheetPreview.data.savedData[j];
          WorksheetPreview.data.currentResponseIndex = j;
        }
      }
      for (let j = 0; j < WorksheetPreview.data.notes.length; j++) {
        if (WorksheetPreview.data.notes[j][0] === worksheetId && WorksheetPreview.data.notes[j][1].length > 0) {
          WorksheetPreview.data.rate = WorksheetPreview.data.notes[j][1];
        }
      }
      if (WorksheetPreview.data.currentResponse.length < 3) {
        return;
      }
      if (WorksheetPreview.data.currentResponse[2].toString().length > 0 && !WorksheetPreview.settings.repeating) {
        WorksheetPreview.data.isFinished = true;
        WorksheetPreview.settings.checkCorrectValues = true;
      }
      if (WorksheetPreview.data.currentResponse[1].length > 0) {
        WorksheetPreview.data.isFilled = true; // rellenado
      }
    },
    renderGrade: function (clicked, showCustomRate) {
      let pnt;
      if (typeof clicked === 'undefined') {
        clicked = false;
      }
      if (typeof showCustomRate === 'undefined') {
        showCustomRate = false;
      }
      if (showCustomRate && WorksheetPreview.data.rate) {
        WorksheetPreview.data.isFinished = true;
      }

      if (WorksheetPreview.data.answersWorksheetTotal > 0) {
        pnt =
          (WorksheetPreview.data.questionsWorksheetTotal * WorksheetPreview.data.maxScore) /
          WorksheetPreview.data.totalValue;
        pnt = Math.round(pnt * 10) / 10;
        if (pnt < 0) {
          pnt = 0;
        }
        if (pnt > WorksheetPreview.data.maxScore) {
          pnt = WorksheetPreview.data.maxScore;
        }
      } else {
        pnt = 0;
      }

      if (typeof WorksheetPreview.parentSettings.worksheet.custom_rate !== 'undefined') {
        pnt = WorksheetPreview.parentSettings.worksheet.custom_rate;
      }

      let $rate = $('#worksheet-rate', WorksheetPreview.context).empty(),
        $sliderRate = $('.workbook-slider-grade', WorksheetPreview.context).eq(WorksheetPreview.data.page);
      if (!WorksheetPreview.data.isFinished && clicked && WorksheetPreview.settings.gradingOptions !== 'no') {
        if (pnt === WorksheetPreview.data.maxScore + 1 || isNaN(pnt)) {
          $rate.html('✓');
          $sliderRate.html('✓');
        } else if (WorksheetPreview.settings.gradingOptions === 'decimals') {
          $rate.html(pnt + '/' + WorksheetPreview.data.maxScore);
          $sliderRate.html(pnt);
        } else if (WorksheetPreview.settings.gradingOptions === 'nodecimals' || (WorksheetPreview.settings.gradingOptions === 'nogrades' && WorksheetPreview.isTeacher)) {
          $rate.html(Math.round(pnt) + '/' + WorksheetPreview.data.maxScore);
          $sliderRate.html(Math.round(pnt));
        } else if (
          typeof WorksheetPreview.settings.gradingOptions === 'object' &&
          WorksheetPreview.settings.gradingOptions[0].indexOf('ttps://') > 0
        ) {
          $rate.html('<img src="' + WorksheetPreview.settings.gradingOptions[Math.round(pnt)] + '">');
          $sliderRate.html(
            '<img height="40px" src="' + WorksheetPreview.settings.gradingOptions[Math.round(pnt)] + '">',
          );
        } else if (
          typeof WorksheetPreview.settings.gradingOptions === 'object' &&
          WorksheetPreview.settings.gradingOptions[0].indexOf('ttps://') < 1
        ) {
          $rate.html(WorksheetPreview.settings.gradingOptions[Math.round(pnt)]);
          $sliderRate.html(WorksheetPreview.settings.gradingOptions[Math.round(pnt)]);
        } else if (pnt <= WorksheetPreview.data.maxScore) {
          $rate.html(Math.round(pnt) + '/' + WorksheetPreview.data.maxScore);
        }
        WorksheetPreview.data.timesSolved++;
        WorksheetPreview.data.notes.push([WorksheetPreview.data.worksheetId, String(pnt)]);
        WorksheetPreview.saveAnswers(false, pnt);
      } else if (WorksheetPreview.data.isFinished && WorksheetPreview.settings.gradingOptions !== 'no') {
        if (typeof WorksheetPreview.data.rate === 'undefined') {
          $rate.html('✓');
          $sliderRate.html('✓');
        } else if (
          WorksheetPreview.data.rate === null ||
          WorksheetPreview.data.rate === 'undefined' ||
          isNaN(WorksheetPreview.data.rate) ||
          WorksheetPreview.data.rate === '11'
        ) {
          $rate.html('✓');
          $sliderRate.html('✓');
        } else if (
          WorksheetPreview.data.rate === 'nopresentado' ||
          WorksheetPreview.data.rate === 'nopresentado-permitir'
        ) {
          $rate.html(Drupal.t('Not handed in'));
          $sliderRate.html(Drupal.t('Not handed in'));
        } else if (WorksheetPreview.data.rate === 'cero' || WorksheetPreview.data.rate === 'cero-permitir') {
          $rate.html(0);
          $sliderRate.html(0);
        } else if (WorksheetPreview.data.rate === '11') {
          $rate.html('✓');
          $sliderRate.html('✓');
        } else if (WorksheetPreview.settings.gradingOptions === 'decimals') {
          $rate.html(WorksheetPreview.data.rate + '/' + WorksheetPreview.data.maxScore);
          $sliderRate.html(WorksheetPreview.data.rate);
        } else if (WorksheetPreview.settings.gradingOptions === 'nodecimals' || (WorksheetPreview.settings.gradingOptions === 'nogrades' && WorksheetPreview.isTeacher)) {
          $rate.html(Math.round(Number(WorksheetPreview.data.rate)) + '/' + WorksheetPreview.data.maxScore);
          $sliderRate.html(Math.round(Number(WorksheetPreview.data.rate)));
        } else if (
          typeof WorksheetPreview.settings.gradingOptions === 'object' &&
          WorksheetPreview.settings.gradingOptions[0].indexOf('ttps://') > 0
        ) {
          $rate.html(
            '<img src="' +
              WorksheetPreview.settings.gradingOptions[Math.round(Number(WorksheetPreview.data.rate))] +
              '">',
          );
          $sliderRate.html(
            '<img height="40px" src="' +
              WorksheetPreview.settings.gradingOptions[Math.round(Number(WorksheetPreview.data.rate))] +
              '">',
          );
        } else if (
          typeof WorksheetPreview.settings.gradingOptions === 'object' &&
          WorksheetPreview.settings.gradingOptions[0].indexOf('ttps://') < 1
        ) {
          $rate.html(WorksheetPreview.settings.gradingOptions[Math.round(Number(WorksheetPreview.data.rate))]);
          $sliderRate.html(WorksheetPreview.settings.gradingOptions[Math.round(Number(WorksheetPreview.data.rate))]);
        }
      }

      if ($rate.length) {
        $rate.toggleClass('hidden', $rate[0].innerText === '' || $rate[0].innerText === 'undefined');
      }
      WorksheetPreview.data.isFinished = true;
    },
    initTimer: function (min) {
      WorksheetPreview.data.min = min;
      let $element = $('#worksheet-timer', WorksheetPreview.context).addClass('show').empty();
      $element.text(Drupal.t('Time left:') + ' ' + min + ' ' + Drupal.t('min'));
      WorksheetPreview.data.timer = setInterval(WorksheetPreview.timerCallback, 60000);
    },
    timerCallback: function () {
      WorksheetPreview.data.min--;
      $('#worksheet-timer', WorksheetPreview.context).text(
        Drupal.t('Time left:') + ' ' + WorksheetPreview.data.min + ' ' + Drupal.t('min'),
      );
      if (WorksheetPreview.data.min === 0) {
        clearInterval(WorksheetPreview.data.timer);
        if (!WorksheetPreview.data.isFinished) {
          document.activeElement.blur();
          $('#worksheet-buttons .worksheet-finish-button', WorksheetPreview.context).trigger('click');
        }
        $('#worksheet-buttons', WorksheetPreview.context).empty();
      }
    },
    renderWorksheet: function () {
      $('#worksheet-preview-elements', WorksheetPreview.context).empty();
      let maxHeight = 0;

      WorksheetPreview.canvasHtml =
        '<svg id="worksheet-final-svg" width="1000" height="' + WorksheetPreview.height + '">';
      let json = WorksheetPreview.data.tempJSON;
      for (let j = 0; j < json.length; j++) {
        if (typeof json[j][0] === 'undefined') {
          continue;
        }
        let text = Worksheet.utility.processText(Worksheet.utility.getProperty(json[j][0]));
        WorksheetPreview.data.text[j] = '';
        for (let obj of Worksheet.elements) {
          if (obj.check(text, json[j][0])) {
            if (typeof obj.renderPreviewElement !== 'undefined') {
              if (json[j][1] + json[j][3] > maxHeight) {
                maxHeight = json[j][1] + json[j][3];
              }
              obj.renderPreviewElement(json[j], j, text);
            }
            break;
          }
        }
      }
      $('#worksheet-canvas2', WorksheetPreview.context).html(WorksheetPreview.canvasHtml + '</svg>');
      if (
        $('#worksheet-missing-medias', WorksheetPreview.context).length &&
        $('#worksheet-missing-medias', WorksheetPreview.context).is(':visible')
      ) {
        $('#worksheet-missing-medias, #worksheet-svg, #worksheet-final-svg', WorksheetPreview.context).css(
          'height',
          maxHeight + 100,
        );
      }
    },
    /**
     *
     * @param {jQuery} $element
     * @param {string[]|string} values
     * @param {bool} append
     */
	 
    createTooltip: function ($element, values = null, append = false, extraClasses = []) {
      const classes = `tooltip absolute inset-0 before:bg-green-500 after:left-1/2 after:border-green-500 after:-top-[4px] ${extraClasses.join(
        ' ',
      )}`;

      let tooltipText;

      if (Array.isArray(values)) {
        if (values.length > 1) {
          tooltipText = Drupal.t('Correct answers: @correctValue', {
            '@correctValue': values.join(', '),
          });
        } else {
          tooltipText = Drupal.t('Correct answer: @correctValue', {
            '@correctValue': values.join(', '),
          });
        }
      } else {
        tooltipText = values;
      }

      if (append) {
        $element.append(`<div class="${classes}" data-tip="${tooltipText}" />`);

        return;
      }
      $element.addClass(classes).attr('data-tip', tooltipText);
    },
    setZoom: function (amt) {},
    saveAnswers: function (savingForLater, pnt) {
      let newResponse = [];
      let newItem;
      for (let j = 0; j < WorksheetPreview.data.tempJSON.length; j++) {
        newResponse[j] = WorksheetPreview.data.tempJSON[j][5];
      }

      if (savingForLater) {
        newItem = [WorksheetPreview.data.worksheetId, newResponse, '', '', '', '', '', null, null, null, null, null];
      } else {
        newItem = [
          WorksheetPreview.data.worksheetId,
          newResponse,
          String(pnt),
          '',
          '',
          '',
          '',
          null,
          null,
          null,
          null,
          null,
        ];
      }

      if (
        (WorksheetPreview.data.isFilled && WorksheetPreview.settings.repeating) ||
        WorksheetPreview.data.currentResponseIndex === -1
      ) {
        WorksheetPreview.data.savedData.push(newItem);
      } else {
        WorksheetPreview.data.savedData[WorksheetPreview.data.currentResponseIndex] = newItem;
      }

      WorksheetPreview.sendAnswersAJAX(savingForLater, pnt);

      // mostrarestadisticas();
    },
    sendAnswersAJAX: function (savingForLater, pnt) {
      if (
        typeof WorksheetPreview.parentSettings.workbook === 'undefined' ||
        (typeof WorksheetPreview.parentSettings.workbook.entity !== 'undefined' &&
          WorksheetPreview.parentSettings.workbook.entity.indexOf('student_workbook:') === -1)
      ) {
        return;
      }
      let data = {
        data: JSON.stringify(WorksheetPreview.data.savedData),
        worksheetId: WorksheetPreview.data.worksheetId,
        repeating: WorksheetPreview.settings.repeating ? 1 : 0,
        currentPage: WorksheetPreview.data.page + 1,
      };
      if (WorksheetPreview.data.hasTeacherCanvas) {
        data.canvasJson = WorksheetPreview.data.hasTeacherCanvas;
      }
      if (!savingForLater) {
        data.note = String(pnt);
      }

      let elementSettings = {};
      elementSettings.url = WorksheetPreview.parentSettings.workbook.ajax_path;
      elementSettings.submit = data;
      Drupal.ajax(elementSettings).execute();
    },
    setStartTime: function () {
      if (WorksheetPreview.data.startTime == 0) {
        WorksheetPreview.data.startTime = Math.floor(Date.now() / 1000);
      }
    },
  };

  $.fn.worksheetPreview = function (methodOrOptions) {

    if (WorksheetPreview.methods[methodOrOptions]) {
      return WorksheetPreview.methods[methodOrOptions].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof methodOrOptions === 'object' || !methodOrOptions) {
      return WorksheetPreview.methods.init.apply(this, arguments);
    } else {
      $.error('Method ' + methodOrOptions + ' does not exist.');
    }
  };

  /**
   * Attach behavior for worksheet preview fields.
   *
   * @type {Drupal~behavior}
   */
  Drupal.behaviors.worksheet_preview = {
    attach: function (context) {
      $('#worksheet-preview', context).once('worksheet-preview').worksheetPreview({
        'content': context,
        'settings': { ...drupalSettings },
      });
    },
  };

  const ZoomWS = {
    value: 1,
    init: function () {
      const mq = window.matchMedia('(min-width: 600px)');
      const changeMQ = (e) => {
        if (e.matches) {
          //console.log('DESKTOP');
          this.value = 1;
          this.update(true);
        } else {
          //console.log('MOBILE');
          this.value = .4;
          this.update(true);
        }
      };
      mq.onchange = changeMQ;
      changeMQ(mq);
    },
    update: function (reset) {
      if (typeof reset === 'undefined') {
        reset = false;
      }
      let $element = $('#worksheet-preview'),
        $parent = $element.parent(),
        self = this;
      if ($parent.data('original-size') === undefined || reset) {
        $parent.css({
          'height': '',
          'width': '',
        }).data('original-size', {
          'height': $element.height(),
          'width': 1000,
        });
        $parent.on('worksheetPreviewRendered', self.callback.bind(self, $parent, $element)).find('img').on('load', self.callback.bind(self, $parent, $element));
      }
      if ($parent.data('original-size').height > 0) {
        $parent.css({
          'height': $parent.data('original-size').height * this.value,
          'width': $parent.data('original-size').width * this.value,
        });
        $element.css({'transform': 'scale(' + this.value + ')'}).worksheetPreview('zoom', this.value);
      }
    },
    callback: function ($parent, $element) {
      let data = $parent.data('original-size');
      data.height = $element.height();
      $parent.data('original-size', data);
      this.update();
    }
  };

  Drupal.behaviors.worksheet_zoom = {
    attach: function (context) {

      const $initZoom = $(once('init-zoom', '.zoom-btns', context));
      $initZoom.each((el, i) => {
        ZoomWS.init();
      });
      const $els = $(once('worksheetZoom', '[data-zoom]', context));
      $els.each((i, el) => {
        $(el).click((e) => {

          ZoomWS.value += parseFloat($(el).attr('data-zoom'));

          if(ZoomWS.value > 1.2 ) {
            ZoomWS.value = 1.2
          }else if(ZoomWS.value < .2) {
            ZoomWS.value = .2;
          }

          ZoomWS.update();
        });
      });
    },

  };

})(jQuery, Drupal, window.Worksheet, drupalSettings);

;
/**
 * @file
 * Custom JS for worksheet answer.
 */

(function ($, Drupal, drupalSettings) {
  'use strict';

  let query = $.extend(true, {}, drupalSettings.path.currentQuery);
  let AnonymousAnswer = {
    initialization: false,
    context: false,
    settings: false,
    $preview: false,
    dialog: {},
    showErrors: true,
    init: function (context, settings) {
      if (!AnonymousAnswer.initialization) {
        AnonymousAnswer.initialization = true;
        AnonymousAnswer.context = context || document;
        AnonymousAnswer.settings = settings;
        AnonymousAnswer.$preview = $('#worksheet-preview', AnonymousAnswer.context);

        if (query.e === 'n') {
          AnonymousAnswer.showErrors = false;
        }

        AnonymousAnswer.initButtons(true);
        AnonymousAnswer.attachEvents();
      }
    },
    attachEvents: function () {
      $('#worksheet-buttons', AnonymousAnswer.context).on('click', '.worksheet-finish-button', function (event) {
        event.preventDefault();
        AnonymousAnswer.isFinished = true;
        if (['send', 's'].indexOf(query.a) !== -1) {
          AnonymousAnswer.backdrop(true);
          if (typeof query.n !== 'undefined' && typeof query.g !== 'undefined' && typeof query.s !== 'undefined' && typeof query.t !== 'undefined' && query.n.length > 0 && query.g.length > 0 && query.s.length > 0 && query.t.length > 0) {
            AnonymousAnswer.checkWorksheet();
            AnonymousAnswer.sendAnswersAJAX(query.n, query.g, query.s, query.t);
          } else {
            AnonymousAnswer.showModal();
          }
        } else if (['check', 'c'].indexOf(query.a) === -1) {
          AnonymousAnswer.backdrop(true);
          AnonymousAnswer.showModal();
        } else {
          AnonymousAnswer.checkWorksheet();
        }
        AnonymousAnswer.initButtons();
      });
    },
	// show the right answers / show the correct answers
    initButtons: function (addButton) {
      $('#worksheet-buttons', AnonymousAnswer.context).empty();

      if (addButton && $('#worksheet-missing-medias', AnonymousAnswer.context).length === 0) {
        $('<button />', {
          'class': 'worksheet-button worksheet-finish-button btn btn-lg btn-primary w-full max-w-sm',
          'title': Drupal.t('Click here if you finished the worksheet'),
        }).text(Drupal.t('Check')).appendTo($('#worksheet-buttons', AnonymousAnswer.context));
      }
	else  {
    $('<button />', {
		'id': 'Refresh',	
		'onclick': 'Refresh()',
         'class': 'worksheet-button worksheet-finish-button btn btn-lg btn-primary w-full max-w-sm',
        'title': Drupal.t('Click here if you finished the worksheet'),
       }).text(Drupal.t('Refresh')).appendTo($('#worksheet-buttons', AnonymousAnswer.context));
	   
	   
	   }
    },
	
    checkWorksheet: function () {
      AnonymousAnswer.$preview.worksheetPreview('validation', { clicked: true, showErrors: AnonymousAnswer.showErrors });
    },
    showModal: function () {

      // $('.worksheet-modal-answers', AnonymousAnswer.context).removeClass('show-button');

      // TODO: Create dialog once
      $('.worksheet-modal-answers').remove();

      let $div = $('<div />'),
        $wrapper = $('<div />', { 'class': 'worksheet-modal-answers-content' }).appendTo($div),
        addButton = false;

      function addTextfields() {
        addButton = true;
        $div.append(AnonymousAnswer.createTextfield('name', Drupal.t('Enter your full name') + ':', query.n));
        $div.append(AnonymousAnswer.createTextfield('level', Drupal.t('Group/level'), query.g));
        $div.append(AnonymousAnswer.createTextfield('subject', Drupal.t('School subject'), query.s));
        $div.append(AnonymousAnswer.createTextfield('email', Drupal.t('Enter your teacher\'s email or key code') + ':', query.t));
        $('.worksheet-modal-answers', AnonymousAnswer.context).addClass('show-button');
      }

      if (['send', 's'].indexOf(query.a) === -1) {

        $('<div />', { 'class': 'worksheet-modal-show-answers-button' })
          .text(Drupal.t('Check my answers')).appendTo($wrapper)
          .on('click', function (event) {
            event.preventDefault();
            AnonymousAnswer.dialog.close();
            AnonymousAnswer.backdrop(false);
            AnonymousAnswer.checkWorksheet();
          });

        $('<div />', { 'class': 'worksheet-modal-send-answers-button' })
          .text(Drupal.t('Email my answers to my teacher')).appendTo($wrapper)
          .on('click', function (event) {
            event.preventDefault();
            $('.worksheet-modal-answers').addClass('to-teacher');
            $(this).off('click');
            addTextfields();
            $(window).trigger('resize.dialogResize');
          });

      } else {

        addTextfields();
        setTimeout(function(){
          $('.worksheet-modal-answers').addClass('to-teacher');
        },0);

      }

      AnonymousAnswer.dialog = Drupal.dialog($div, {
        dialogClass: 'worksheet-modal-answers max-w-lg no-close',
        width: '100%',
        title: (['send', 's'].indexOf(query.a) === -1) ? Drupal.t('What do you want to do?') : Drupal.t('Email my answers to my teacher'),
        buttons: [
          {
            text: Drupal.t('Send'),
            primary: true,
            click: function click() {
              let name = $('#modal-input-name', $div).val(),
                level = $('#modal-input-level', $div).val(),
                subject = $('#modal-input-subject', $div).val(),
                email = $('#modal-input-email', $div).val();

              if (name === '') {
                $('#modal-input-name', $div).focus();
                return;
              }
              if (level === '') {
                $('#modal-input-level', $div).focus();
                return;
              }
              if (subject === '') {
                $('#modal-input-subject', $div).focus();
                return;
              }
              if (email === '') {
                $('#modal-input-email', $div).focus();
                return;
              }
              AnonymousAnswer.checkWorksheet();
              AnonymousAnswer.sendAnswersAJAX(name, level, subject, email);
              AnonymousAnswer.initButtons();
              AnonymousAnswer.dialog.close();
              AnonymousAnswer.backdrop(false);
            },
          }, {
            text: Drupal.t('Close'),
            click: function click() {
              $(this).dialog('close');
              AnonymousAnswer.backdrop(false);
              AnonymousAnswer.initButtons(true);
            },
          },
        ],
      });

      AnonymousAnswer.dialog.showModal();
      if (addButton) {
        $('.worksheet-modal-answers', AnonymousAnswer.context).addClass('show-button');
      }
    },
    sendAnswersAJAX: function (name, level, subject, email) {
      if (typeof drupalSettings.worksheet === 'undefined' || typeof drupalSettings.worksheet.ajax_path === 'undefined') {
        return;
      }

      let $preview = AnonymousAnswer.$preview;
      let data = {
        name: name,
        level: level,
        subject: subject,
        email: email,
        totalTime: $preview.worksheetPreview('getTotalTime'),
        pnt: $preview.worksheetPreview('getPnt'),
        maxScore: $preview.worksheetPreview('getMaxScore'),
        ignoreCapitalLetters: $preview.worksheetPreview('getIgnoreCapitalLetters'),
        ignoreSigns: $preview.worksheetPreview('getIgnoreSigns'),
        ignoreAccents: $preview.worksheetPreview('getIgnoreAccents'),
        notification: $preview.worksheetPreview('getNotification'),
        json: $preview.worksheetPreview('getJson'),
      };

      let elementSettings = {};
      elementSettings.url = drupalSettings.worksheet.ajax_path;
      elementSettings.submit = data;
      Drupal.ajax(elementSettings).execute();
    },
    createTextfield: function (id, label, value) {

      value = typeof value !== 'undefined' ? value : '';
      return $('<div class="form-item' + (value !== '' ? ' hidden' : '') + '">\n' +
        '  <label for="modal-input-' + id + '" class="form-item__label form-required text-sm lg:text-lg">' + label + '</label>\n' +
        '  <input autocorrect="none" autocapitalize="none" spellcheck="false" type="text" name="' + id + '" id="modal-input-' + id + '" value="' + value + '" size="60" maxlength="250" class="form-text required form-element" required="required" aria-required="true">\n' +
        '</div>');
    },
    backdrop: function (status) {
      $('body').toggleClass('stop-scrolling', status);
      $('.ui-dialog.worksheet-modal-answers').css({ top: '0' });
      $('#worksheet-backdrop', AnonymousAnswer.context).toggleClass('show', status);
    },
  };

  Drupal.AjaxCommands.prototype.worksheetAnswerAdded = function (ajax, response, status) {
    if (typeof AnonymousAnswer.dialog === 'object' && typeof AnonymousAnswer.dialog.close === 'function') {
      AnonymousAnswer.dialog.close();
    }
    AnonymousAnswer.backdrop(false);
  };

  Drupal.AjaxCommands.prototype.worksheetAnswerError = function (ajax, response, status) {
    AnonymousAnswer.initButtons(true);
    AnonymousAnswer.backdrop(false);
  };

  /**
   * Attach behavior for Anonymous answer.
   *
   * @type {Drupal~behavior}
   */
  Drupal.behaviors.anonymous_answer = {
    attach: function (context) {
      AnonymousAnswer.init(context, { ...drupalSettings.worksheet });
    },
  };

})(jQuery, Drupal, drupalSettings);

;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, Drupal, debounce) {
  $.fn.drupalGetSummary = function () {
    var callback = this.data('summaryCallback');
    return this[0] && callback ? callback(this[0]).trim() : '';
  };
  $.fn.drupalSetSummary = function (callback) {
    var self = this;
    if (typeof callback !== 'function') {
      var val = callback;
      callback = function callback() {
        return val;
      };
    }
    return this.data('summaryCallback', callback).off('formUpdated.summary').on('formUpdated.summary', function () {
      self.trigger('summaryUpdated');
    }).trigger('summaryUpdated');
  };
  Drupal.behaviors.formSingleSubmit = {
    attach: function attach() {
      function onFormSubmit(e) {
        var $form = $(e.currentTarget);
        var formValues = $form.serialize();
        var previousValues = $form.attr('data-drupal-form-submit-last');
        if (previousValues === formValues) {
          e.preventDefault();
        } else {
          $form.attr('data-drupal-form-submit-last', formValues);
        }
      }
      $(once('form-single-submit', 'body')).on('submit.singleSubmit', 'form:not([method~="GET"])', onFormSubmit);
    }
  };
  function triggerFormUpdated(element) {
    $(element).trigger('formUpdated');
  }
  function fieldsList(form) {
    return [].map.call(form.querySelectorAll('[name][id]'), function (el) {
      return el.id;
    });
  }
  Drupal.behaviors.formUpdated = {
    attach: function attach(context) {
      var $context = $(context);
      var contextIsForm = $context.is('form');
      var $forms = $(once('form-updated', contextIsForm ? $context : $context.find('form')));
      var formFields;
      if ($forms.length) {
        $.makeArray($forms).forEach(function (form) {
          var events = 'change.formUpdated input.formUpdated ';
          var eventHandler = debounce(function (event) {
            triggerFormUpdated(event.target);
          }, 300);
          formFields = fieldsList(form).join(',');
          form.setAttribute('data-drupal-form-fields', formFields);
          $(form).on(events, eventHandler);
        });
      }
      if (contextIsForm) {
        formFields = fieldsList(context).join(',');
        var currentFields = $(context).attr('data-drupal-form-fields');
        if (formFields !== currentFields) {
          triggerFormUpdated(context);
        }
      }
    },
    detach: function detach(context, settings, trigger) {
      var $context = $(context);
      var contextIsForm = $context.is('form');
      if (trigger === 'unload') {
        once.remove('form-updated', contextIsForm ? $context : $context.find('form')).forEach(function (form) {
          form.removeAttribute('data-drupal-form-fields');
          $(form).off('.formUpdated');
        });
      }
    }
  };
  Drupal.behaviors.fillUserInfoFromBrowser = {
    attach: function attach(context, settings) {
      var userInfo = ['name', 'mail', 'homepage'];
      var $forms = $(once('user-info-from-browser', '[data-user-info-from-browser]'));
      if ($forms.length) {
        userInfo.forEach(function (info) {
          var $element = $forms.find("[name=".concat(info, "]"));
          var browserData = localStorage.getItem("Drupal.visitor.".concat(info));
          if (!$element.length) {
            return;
          }
          var emptyValue = $element[0].value === '';
          var defaultValue = $element.attr('data-drupal-default-value') === $element[0].value;
          if (browserData && (emptyValue || defaultValue)) {
            $element.each(function (index, item) {
              item.value = browserData;
            });
          }
        });
      }
      $forms.on('submit', function () {
        userInfo.forEach(function (info) {
          var $element = $forms.find("[name=".concat(info, "]"));
          if ($element.length) {
            localStorage.setItem("Drupal.visitor.".concat(info), $element[0].value);
          }
        });
      });
    }
  };
  var handleFragmentLinkClickOrHashChange = function handleFragmentLinkClickOrHashChange(e) {
    var url;
    if (e.type === 'click') {
      url = e.currentTarget.location ? e.currentTarget.location : e.currentTarget;
    } else {
      url = window.location;
    }
    var hash = url.hash.substr(1);
    if (hash) {
      var $target = $("#".concat(hash));
      $('body').trigger('formFragmentLinkClickOrHashChange', [$target]);
      setTimeout(function () {
        return $target.trigger('focus');
      }, 300);
    }
  };
  var debouncedHandleFragmentLinkClickOrHashChange = debounce(handleFragmentLinkClickOrHashChange, 300, true);
  $(window).on('hashchange.form-fragment', debouncedHandleFragmentLinkClickOrHashChange);
  $(document).on('click.form-fragment', 'a[href*="#"]', debouncedHandleFragmentLinkClickOrHashChange);
})(jQuery, Drupal, Drupal.debounce);;
/**
 * @file
 * Defines Javascript behaviors for the commerce cart module.
 */

(function ($, Drupal, drupalSettings) {
  'use strict';

  Drupal.behaviors.commerceCartBlock = {
    attach(context) {
      const $context = $(context);
      const $cart = $context.find('.cart--cart-block').addBack('.cart--cart-block');
      const $cartContents = $cart.find('.cart-block--contents');

      if ($cartContents.length > 0) {
        // Expand the block when the link is clicked.
        $(once('cart-button-processed', '.cart-block--link__expand', context)).on('click', (e) => {
          // Prevent it from going to the cart.
          e.preventDefault();
          // Get the shopping cart width + the offset to the left.
          const windowWidth = $(window).width();
          const cartWidth = $cartContents.width() + $cart.offset().left;
          // If the cart goes out of the viewport we should align it right.
          if (cartWidth > windowWidth) {
            $cartContents.addClass('is-outside-horizontal');
          }
          // Toggle the expanded class.
          $cartContents
            .toggleClass('cart-block--contents__expanded')
            .slideToggle();
        });
      }
    }
  };
})(jQuery, Drupal, drupalSettings);
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function (Drupal, drupalSettings) {
  function mapTextContentToAjaxResponse(content) {
    if (content === '') {
      return false;
    }
    try {
      return JSON.parse(content);
    } catch (e) {
      return false;
    }
  }
  function bigPipeProcessPlaceholderReplacement(placeholderReplacement) {
    var placeholderId = placeholderReplacement.getAttribute('data-big-pipe-replacement-for-placeholder-with-id');
    var content = placeholderReplacement.textContent.trim();
    if (typeof drupalSettings.bigPipePlaceholderIds[placeholderId] !== 'undefined') {
      var response = mapTextContentToAjaxResponse(content);
      if (response === false) {
        once.remove('big-pipe', placeholderReplacement);
      } else {
        var ajaxObject = Drupal.ajax({
          url: '',
          base: false,
          element: false,
          progress: false
        });
        ajaxObject.success(response, 'success');
      }
    }
  }
  var interval = drupalSettings.bigPipeInterval || 50;
  var timeoutID;
  function bigPipeProcessDocument(context) {
    if (!context.querySelector('script[data-big-pipe-event="start"]')) {
      return false;
    }
    once('big-pipe-early-behaviors', 'body', context).forEach(function (el) {
      Drupal.attachBehaviors(el);
    });
    once('big-pipe', 'script[data-big-pipe-replacement-for-placeholder-with-id]', context).forEach(bigPipeProcessPlaceholderReplacement);
    if (context.querySelector('script[data-big-pipe-event="stop"]')) {
      if (timeoutID) {
        clearTimeout(timeoutID);
      }
      return true;
    }
    return false;
  }
  function bigPipeProcess() {
    timeoutID = setTimeout(function () {
      if (!bigPipeProcessDocument(document)) {
        bigPipeProcess();
      }
    }, interval);
  }
  bigPipeProcess();
  window.addEventListener('load', function () {
    if (timeoutID) {
      clearTimeout(timeoutID);
    }
    bigPipeProcessDocument(document);
  });
})(Drupal, drupalSettings);;



//////////////////////////////////////////////////////////////





